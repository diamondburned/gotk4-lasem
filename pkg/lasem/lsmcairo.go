// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// The function takes the following parameters:
//
//    - cairo
//    - to
//    - from
//
func CairoBoxDeviceToUser(cairo *cairo.Context, to, from *Box) {
	var _arg1 *C.cairo_t // out
	var _arg2 *C.LsmBox  // out
	var _arg3 *C.LsmBox  // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cairo.Native()))
	_arg2 = (*C.LsmBox)(gextras.StructNative(unsafe.Pointer(to)))
	_arg3 = (*C.LsmBox)(gextras.StructNative(unsafe.Pointer(from)))

	C.lsm_cairo_box_device_to_user(_arg1, _arg2, _arg3)
	runtime.KeepAlive(cairo)
	runtime.KeepAlive(to)
	runtime.KeepAlive(from)
}

// The function takes the following parameters:
//
//    - cairo
//    - to
//    - from
//
func CairoBoxUserToDevice(cairo *cairo.Context, to, from *Box) {
	var _arg1 *C.cairo_t // out
	var _arg2 *C.LsmBox  // out
	var _arg3 *C.LsmBox  // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cairo.Native()))
	_arg2 = (*C.LsmBox)(gextras.StructNative(unsafe.Pointer(to)))
	_arg3 = (*C.LsmBox)(gextras.StructNative(unsafe.Pointer(from)))

	C.lsm_cairo_box_user_to_device(_arg1, _arg2, _arg3)
	runtime.KeepAlive(cairo)
	runtime.KeepAlive(to)
	runtime.KeepAlive(from)
}

// The function takes the following parameters:
//
//    - cairo
//    - rx
//    - ry
//    - xAxisRotation
//    - largeArcFlag
//    - sweepFlag
//    - x
//    - y
//
func CairoEllipticalArc(cairo *cairo.Context, rx, ry, xAxisRotation float64, largeArcFlag, sweepFlag bool, x, y float64) {
	var _arg1 *C.cairo_t // out
	var _arg2 C.double   // out
	var _arg3 C.double   // out
	var _arg4 C.double   // out
	var _arg5 C.gboolean // out
	var _arg6 C.gboolean // out
	var _arg7 C.double   // out
	var _arg8 C.double   // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cairo.Native()))
	_arg2 = C.double(rx)
	_arg3 = C.double(ry)
	_arg4 = C.double(xAxisRotation)
	if largeArcFlag {
		_arg5 = C.TRUE
	}
	if sweepFlag {
		_arg6 = C.TRUE
	}
	_arg7 = C.double(x)
	_arg8 = C.double(y)

	C.lsm_cairo_elliptical_arc(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
	runtime.KeepAlive(cairo)
	runtime.KeepAlive(rx)
	runtime.KeepAlive(ry)
	runtime.KeepAlive(xAxisRotation)
	runtime.KeepAlive(largeArcFlag)
	runtime.KeepAlive(sweepFlag)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// The function takes the following parameters:
//
//    - cr
//    - path
//
func CairoEmitSVGPath(cr *cairo.Context, path string) {
	var _arg1 *C.cairo_t // out
	var _arg2 *C.char    // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(path)))
	defer C.free(unsafe.Pointer(_arg2))

	C.lsm_cairo_emit_svg_path(_arg1, _arg2)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(path)
}

// The function takes the following parameters:
//
//    - cairo
//    - x
//
func CairoHorizontal(cairo *cairo.Context, x float64) {
	var _arg1 *C.cairo_t // out
	var _arg2 C.double   // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cairo.Native()))
	_arg2 = C.double(x)

	C.lsm_cairo_horizontal(_arg1, _arg2)
	runtime.KeepAlive(cairo)
	runtime.KeepAlive(x)
}

// The function takes the following parameters:
//
//    - cr
//    - x1
//    - y1
//    - x
//    - y
//
func CairoQuadraticCurveTo(cr *cairo.Context, x1, y1, x, y float64) {
	var _arg1 *C.cairo_t // out
	var _arg2 C.double   // out
	var _arg3 C.double   // out
	var _arg4 C.double   // out
	var _arg5 C.double   // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = C.double(x1)
	_arg3 = C.double(y1)
	_arg4 = C.double(x)
	_arg5 = C.double(y)

	C.lsm_cairo_quadratic_curve_to(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(x1)
	runtime.KeepAlive(y1)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// The function takes the following parameters:
//
//    - cairo
//    - rx
//    - ry
//    - xAxisRotation
//    - largeArcFlag
//    - sweepFlag
//    - dx
//    - dy
//
func CairoRelEllipticalArc(cairo *cairo.Context, rx, ry, xAxisRotation float64, largeArcFlag, sweepFlag bool, dx, dy float64) {
	var _arg1 *C.cairo_t // out
	var _arg2 C.double   // out
	var _arg3 C.double   // out
	var _arg4 C.double   // out
	var _arg5 C.gboolean // out
	var _arg6 C.gboolean // out
	var _arg7 C.double   // out
	var _arg8 C.double   // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cairo.Native()))
	_arg2 = C.double(rx)
	_arg3 = C.double(ry)
	_arg4 = C.double(xAxisRotation)
	if largeArcFlag {
		_arg5 = C.TRUE
	}
	if sweepFlag {
		_arg6 = C.TRUE
	}
	_arg7 = C.double(dx)
	_arg8 = C.double(dy)

	C.lsm_cairo_rel_elliptical_arc(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8)
	runtime.KeepAlive(cairo)
	runtime.KeepAlive(rx)
	runtime.KeepAlive(ry)
	runtime.KeepAlive(xAxisRotation)
	runtime.KeepAlive(largeArcFlag)
	runtime.KeepAlive(sweepFlag)
	runtime.KeepAlive(dx)
	runtime.KeepAlive(dy)
}

// The function takes the following parameters:
//
//    - cairo
//    - dx
//
func CairoRelHorizontal(cairo *cairo.Context, dx float64) {
	var _arg1 *C.cairo_t // out
	var _arg2 C.double   // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cairo.Native()))
	_arg2 = C.double(dx)

	C.lsm_cairo_rel_horizontal(_arg1, _arg2)
	runtime.KeepAlive(cairo)
	runtime.KeepAlive(dx)
}

// The function takes the following parameters:
//
//    - cr
//    - dx1
//    - dy1
//    - dx
//    - dy
//
func CairoRelQuadraticCurveTo(cr *cairo.Context, dx1, dy1, dx, dy float64) {
	var _arg1 *C.cairo_t // out
	var _arg2 C.double   // out
	var _arg3 C.double   // out
	var _arg4 C.double   // out
	var _arg5 C.double   // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cr.Native()))
	_arg2 = C.double(dx1)
	_arg3 = C.double(dy1)
	_arg4 = C.double(dx)
	_arg5 = C.double(dy)

	C.lsm_cairo_rel_quadratic_curve_to(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(cr)
	runtime.KeepAlive(dx1)
	runtime.KeepAlive(dy1)
	runtime.KeepAlive(dx)
	runtime.KeepAlive(dy)
}

// The function takes the following parameters:
//
//    - cairo
//    - dy
//
func CairoRelVertical(cairo *cairo.Context, dy float64) {
	var _arg1 *C.cairo_t // out
	var _arg2 C.double   // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cairo.Native()))
	_arg2 = C.double(dy)

	C.lsm_cairo_rel_vertical(_arg1, _arg2)
	runtime.KeepAlive(cairo)
	runtime.KeepAlive(dy)
}

// CairoSetSourcePixbuf sets the given pixbuf as the source pattern for cairo.
//
// The pattern has an extend mode of CAIRO_EXTEND_NONE and is aligned so that
// the origin of pixbuf is pixbuf_x, pixbuf_y.
//
// The function takes the following parameters:
//
//    - cairo context.
//    - pixbuf: Pixbuf.
//    - pixbufX: x coordinate of location to place upper left corner of pixbuf.
//    - pixbufY: y coordinate of location to place upper left corner of pixbuf.
//
func CairoSetSourcePixbuf(cairo *cairo.Context, pixbuf *gdkpixbuf.Pixbuf, pixbufX, pixbufY float64) {
	var _arg1 *C.cairo_t   // out
	var _arg2 *C.GdkPixbuf // out
	var _arg3 C.double     // out
	var _arg4 C.double     // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cairo.Native()))
	_arg2 = (*C.GdkPixbuf)(unsafe.Pointer(externglib.InternObject(pixbuf).Native()))
	_arg3 = C.double(pixbufX)
	_arg4 = C.double(pixbufY)

	C.lsm_cairo_set_source_pixbuf(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(cairo)
	runtime.KeepAlive(pixbuf)
	runtime.KeepAlive(pixbufX)
	runtime.KeepAlive(pixbufY)
}

// The function takes the following parameters:
//
//    - cairo
//    - y
//
func CairoVertical(cairo *cairo.Context, y float64) {
	var _arg1 *C.cairo_t // out
	var _arg2 C.double   // out

	_arg1 = (*C.cairo_t)(unsafe.Pointer(cairo.Native()))
	_arg2 = C.double(y)

	C.lsm_cairo_vertical(_arg1, _arg2)
	runtime.KeepAlive(cairo)
	runtime.KeepAlive(y)
}

// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// glib.Type values for lsmmathmltraits.go.
var (
	GTypeMathMLColor  = externglib.Type(C.lsm_mathml_color_get_type())
	GTypeMathMLLength = externglib.Type(C.lsm_mathml_length_get_type())
	GTypeMathMLSpace  = externglib.Type(C.lsm_mathml_space_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeMathMLColor, F: marshalMathMLColor},
		{T: GTypeMathMLLength, F: marshalMathMLLength},
		{T: GTypeMathMLSpace, F: marshalMathMLSpace},
	})
}

const MATHML_SPACE_EM_MEDIUM = 0.222222
const MATHML_SPACE_EM_NEGATIVE_MEDIUM = 0.222222
const MATHML_SPACE_EM_NEGATIVE_THICK = 0.277778
const MATHML_SPACE_EM_NEGATIVE_THIN = 0.166667
const MATHML_SPACE_EM_NEGATIVE_VERY_THICK = 0.333333
const MATHML_SPACE_EM_NEGATIVE_VERY_THIN = 0.111111
const MATHML_SPACE_EM_NEGATIVE_VERY_VERY_THICK = 0.388889
const MATHML_SPACE_EM_NEGATIVE_VERY_VERY_THIN = 0.055556
const MATHML_SPACE_EM_THICK = 0.277778
const MATHML_SPACE_EM_THIN = 0.166667
const MATHML_SPACE_EM_VERY_THICK = 0.333333
const MATHML_SPACE_EM_VERY_THIN = 0.111111
const MATHML_SPACE_EM_VERY_VERY_THICK = 0.388889
const MATHML_SPACE_EM_VERY_VERY_THIN = 0.055556

// MathMLColor: instance of this type is always passed by reference.
type MathMLColor struct {
	*mathMLColor
}

// mathMLColor is the struct that's finalized.
type mathMLColor struct {
	native *C.LsmMathmlColor
}

func marshalMathMLColor(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &MathMLColor{&mathMLColor{(*C.LsmMathmlColor)(b)}}, nil
}

// NewMathMLColor creates a new MathMLColor instance from the given
// fields.
func NewMathMLColor(red, green, blue, alpha float64) MathMLColor {
	var f0 C.double // out
	f0 = C.double(red)
	var f1 C.double // out
	f1 = C.double(green)
	var f2 C.double // out
	f2 = C.double(blue)
	var f3 C.double // out
	f3 = C.double(alpha)

	v := C.LsmMathmlColor{
		red:   f0,
		green: f1,
		blue:  f2,
		alpha: f3,
	}

	return *(*MathMLColor)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

func (m *MathMLColor) Red() float64 {
	var v float64 // out
	v = float64(m.native.red)
	return v
}

func (m *MathMLColor) Green() float64 {
	var v float64 // out
	v = float64(m.native.green)
	return v
}

func (m *MathMLColor) Blue() float64 {
	var v float64 // out
	v = float64(m.native.blue)
	return v
}

func (m *MathMLColor) Alpha() float64 {
	var v float64 // out
	v = float64(m.native.alpha)
	return v
}

// MathMLEnumList: instance of this type is always passed by reference.
type MathMLEnumList struct {
	*mathMLEnumList
}

// mathMLEnumList is the struct that's finalized.
type mathMLEnumList struct {
	native *C.LsmMathmlEnumList
}

func (m *MathMLEnumList) NValues() uint {
	var v uint // out
	v = uint(m.native.n_values)
	return v
}

func (m *MathMLEnumList) Values() *int {
	var v *int // out
	v = (*int)(unsafe.Pointer(m.native.values))
	return v
}

// The function takes the following parameters:
//
func (enumList *MathMLEnumList) Init(enumListDefault *MathMLEnumList) {
	var _arg0 *C.LsmMathmlEnumList // out
	var _arg1 *C.LsmMathmlEnumList // out

	_arg0 = (*C.LsmMathmlEnumList)(gextras.StructNative(unsafe.Pointer(enumList)))
	_arg1 = (*C.LsmMathmlEnumList)(gextras.StructNative(unsafe.Pointer(enumListDefault)))

	C.lsm_mathml_enum_list_init(_arg0, _arg1)
	runtime.KeepAlive(enumList)
	runtime.KeepAlive(enumListDefault)
}

// MathMLLength: instance of this type is always passed by reference.
type MathMLLength struct {
	*mathMLLength
}

// mathMLLength is the struct that's finalized.
type mathMLLength struct {
	native *C.LsmMathmlLength
}

func marshalMathMLLength(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &MathMLLength{&mathMLLength{(*C.LsmMathmlLength)(b)}}, nil
}

func (m *MathMLLength) Value() float64 {
	var v float64 // out
	v = float64(m.native.value)
	return v
}

func (m *MathMLLength) Unit() MathMLUnit {
	var v MathMLUnit // out
	v = MathMLUnit(m.native.unit)
	return v
}

// The function takes the following parameters:
//
//    - base
//    - fontSize
//
// The function returns the following values:
//
func (length *MathMLLength) Normalize(base float64, fontSize float64) float64 {
	var _arg0 *C.LsmMathmlLength // out
	var _arg1 C.double           // out
	var _arg2 C.double           // out
	var _cret C.double           // in

	_arg0 = (*C.LsmMathmlLength)(gextras.StructNative(unsafe.Pointer(length)))
	_arg1 = C.double(base)
	_arg2 = C.double(fontSize)

	_cret = C.lsm_mathml_length_normalize(_arg0, _arg1, _arg2)
	runtime.KeepAlive(length)
	runtime.KeepAlive(base)
	runtime.KeepAlive(fontSize)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// MathMLScriptLevel: instance of this type is always passed by reference.
type MathMLScriptLevel struct {
	*mathMLScriptLevel
}

// mathMLScriptLevel is the struct that's finalized.
type mathMLScriptLevel struct {
	native *C.LsmMathmlScriptLevel
}

func (m *MathMLScriptLevel) Sign() MathMLScriptLevelSign {
	var v MathMLScriptLevelSign // out
	v = MathMLScriptLevelSign(m.native.sign)
	return v
}

func (m *MathMLScriptLevel) Level() int {
	var v int // out
	v = int(m.native.level)
	return v
}

// MathMLSpace: instance of this type is always passed by reference.
type MathMLSpace struct {
	*mathMLSpace
}

// mathMLSpace is the struct that's finalized.
type mathMLSpace struct {
	native *C.LsmMathmlSpace
}

func marshalMathMLSpace(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &MathMLSpace{&mathMLSpace{(*C.LsmMathmlSpace)(b)}}, nil
}

func (m *MathMLSpace) Name() MathMLSpaceName {
	var v MathMLSpaceName // out
	v = MathMLSpaceName(m.native.name)
	return v
}

func (m *MathMLSpace) Length() *MathMLLength {
	var v *MathMLLength // out
	v = (*MathMLLength)(gextras.NewStructNative(unsafe.Pointer((&m.native.length))))
	return v
}

// MathMLSpaceList: instance of this type is always passed by reference.
type MathMLSpaceList struct {
	*mathMLSpaceList
}

// mathMLSpaceList is the struct that's finalized.
type mathMLSpaceList struct {
	native *C.LsmMathmlSpaceList
}

func (m *MathMLSpaceList) NSpaces() uint {
	var v uint // out
	v = uint(m.native.n_spaces)
	return v
}

func (m *MathMLSpaceList) Spaces() *MathMLSpace {
	var v *MathMLSpace // out
	v = (*MathMLSpace)(gextras.NewStructNative(unsafe.Pointer(m.native.spaces)))
	return v
}

// The function takes the following parameters:
//
func (spaceList *MathMLSpaceList) Init(spaceListDefault *MathMLSpaceList) {
	var _arg0 *C.LsmMathmlSpaceList // out
	var _arg1 *C.LsmMathmlSpaceList // out

	_arg0 = (*C.LsmMathmlSpaceList)(gextras.StructNative(unsafe.Pointer(spaceList)))
	_arg1 = (*C.LsmMathmlSpaceList)(gextras.StructNative(unsafe.Pointer(spaceListDefault)))

	C.lsm_mathml_space_list_init(_arg0, _arg1)
	runtime.KeepAlive(spaceList)
	runtime.KeepAlive(spaceListDefault)
}

// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// The function takes the following parameters:
//
//    - parent
//    - view
//    - x
//    - y
//    - base
//    - subscript
//    - superscript
//    - subscriptOffset
//    - superscriptOffset
//
func MathMLLayoutSubSup(parent MathMLElementer, view *MathMLView, x, y float64, base, subscript, superscript MathMLElementer, subscriptOffset, superscriptOffset float64) {
	var _arg1 *C.LsmMathmlElement // out
	var _arg2 *C.LsmMathmlView    // out
	var _arg3 C.double            // out
	var _arg4 C.double            // out
	var _arg5 *C.LsmMathmlElement // out
	var _arg6 *C.LsmMathmlElement // out
	var _arg7 *C.LsmMathmlElement // out
	var _arg8 C.double            // out
	var _arg9 C.double            // out

	_arg1 = (*C.LsmMathmlElement)(unsafe.Pointer(externglib.InternObject(parent).Native()))
	_arg2 = (*C.LsmMathmlView)(unsafe.Pointer(externglib.InternObject(view).Native()))
	_arg3 = C.double(x)
	_arg4 = C.double(y)
	_arg5 = (*C.LsmMathmlElement)(unsafe.Pointer(externglib.InternObject(base).Native()))
	_arg6 = (*C.LsmMathmlElement)(unsafe.Pointer(externglib.InternObject(subscript).Native()))
	_arg7 = (*C.LsmMathmlElement)(unsafe.Pointer(externglib.InternObject(superscript).Native()))
	_arg8 = C.double(subscriptOffset)
	_arg9 = C.double(superscriptOffset)

	C.lsm_mathml_layout_sub_sup(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(view)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(base)
	runtime.KeepAlive(subscript)
	runtime.KeepAlive(superscript)
	runtime.KeepAlive(subscriptOffset)
	runtime.KeepAlive(superscriptOffset)
}

// The function takes the following parameters:
//
//    - parent
//    - view
//    - base
//    - subscript
//    - superscript
//    - subscriptOffsetMin
//    - superscriptOffsetMin
//    - display
//    - stretchBbox
//    - bbox
//    - subscriptOffset
//    - superscriptOffset
//
func MathMLMeasureSubSup(parent MathMLElementer, view *MathMLView, base, subscript, superscript MathMLElementer, subscriptOffsetMin, superscriptOffsetMin float64, display MathMLDisplay, stretchBbox, bbox *MathMLBbox, subscriptOffset, superscriptOffset *float64) {
	var _arg1 *C.LsmMathmlElement // out
	var _arg2 *C.LsmMathmlView    // out
	var _arg3 *C.LsmMathmlElement // out
	var _arg4 *C.LsmMathmlElement // out
	var _arg5 *C.LsmMathmlElement // out
	var _arg6 C.double            // out
	var _arg7 C.double            // out
	var _arg8 C.LsmMathmlDisplay  // out
	var _arg9 *C.LsmMathmlBbox    // out
	var _arg10 *C.LsmMathmlBbox   // out
	var _arg11 *C.double          // out
	var _arg12 *C.double          // out

	_arg1 = (*C.LsmMathmlElement)(unsafe.Pointer(externglib.InternObject(parent).Native()))
	_arg2 = (*C.LsmMathmlView)(unsafe.Pointer(externglib.InternObject(view).Native()))
	_arg3 = (*C.LsmMathmlElement)(unsafe.Pointer(externglib.InternObject(base).Native()))
	_arg4 = (*C.LsmMathmlElement)(unsafe.Pointer(externglib.InternObject(subscript).Native()))
	_arg5 = (*C.LsmMathmlElement)(unsafe.Pointer(externglib.InternObject(superscript).Native()))
	_arg6 = C.double(subscriptOffsetMin)
	_arg7 = C.double(superscriptOffsetMin)
	_arg8 = C.LsmMathmlDisplay(display)
	_arg9 = (*C.LsmMathmlBbox)(gextras.StructNative(unsafe.Pointer(stretchBbox)))
	_arg10 = (*C.LsmMathmlBbox)(gextras.StructNative(unsafe.Pointer(bbox)))
	_arg11 = (*C.double)(unsafe.Pointer(subscriptOffset))
	_arg12 = (*C.double)(unsafe.Pointer(superscriptOffset))

	C.lsm_mathml_measure_sub_sup(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(view)
	runtime.KeepAlive(base)
	runtime.KeepAlive(subscript)
	runtime.KeepAlive(superscript)
	runtime.KeepAlive(subscriptOffsetMin)
	runtime.KeepAlive(superscriptOffsetMin)
	runtime.KeepAlive(display)
	runtime.KeepAlive(stretchBbox)
	runtime.KeepAlive(bbox)
	runtime.KeepAlive(subscriptOffset)
	runtime.KeepAlive(superscriptOffset)
}

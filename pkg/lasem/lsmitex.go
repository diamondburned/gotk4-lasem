// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
import "C"

// ItexFreeMathmlBuffer: free the buffer returned by lsm_itex_to_mathml.
//
// The function takes the following parameters:
//
//    - mathml (optional) buffer.
//
func ItexFreeMathmlBuffer(mathml string) {
	var _arg1 *C.char // out

	if mathml != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(mathml)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.lsm_itex_free_mathml_buffer(_arg1)
	runtime.KeepAlive(mathml)
}

// ItexToMathml converts an itex string to a Mathml representation.
//
// The function takes the following parameters:
//
//    - itex (optional) string.
//    - size: itex string length, -1 if NULL terminated.
//
// The function returns the following values:
//
//    - utf8: newly allocated string, NULL on parse error. The returned data must
//      be freed using lsm_itex_free_mathml_buffer.
//
func ItexToMathml(itex string, size int) string {
	var _arg1 *C.char  // out
	var _arg2 C.gssize // out
	var _cret *C.char  // in

	if itex != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(itex)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = C.gssize(size)

	_cret = C.lsm_itex_to_mathml(_arg1, _arg2)
	runtime.KeepAlive(itex)
	runtime.KeepAlive(size)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

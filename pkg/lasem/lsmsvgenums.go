// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGAlignFromString(str string) SVGAlign {
	var _arg1 *C.char       // out
	var _cret C.LsmSvgAlign // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_align_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgAlign SVGAlign // out

	_svgAlign = SVGAlign(_cret)

	return _svgAlign
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGAlignToString(align SVGAlign) string {
	var _arg1 C.LsmSvgAlign // out
	var _cret *C.char       // in

	_arg1 = C.LsmSvgAlign(align)

	_cret = C.lsm_svg_align_to_string(_arg1)
	runtime.KeepAlive(align)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGBlendingModeFromString(str string) SVGBlendingMode {
	var _arg1 *C.char              // out
	var _cret C.LsmSvgBlendingMode // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_blending_mode_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgBlendingMode SVGBlendingMode // out

	_svgBlendingMode = SVGBlendingMode(_cret)

	return _svgBlendingMode
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGBlendingModeToString(blendingMode SVGBlendingMode) string {
	var _arg1 C.LsmSvgBlendingMode // out
	var _cret *C.char              // in

	_arg1 = C.LsmSvgBlendingMode(blendingMode)

	_cret = C.lsm_svg_blending_mode_to_string(_arg1)
	runtime.KeepAlive(blendingMode)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGChannelSelectorFromString(str string) SVGChannelSelector {
	var _arg1 *C.char                 // out
	var _cret C.LsmSvgChannelSelector // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_channel_selector_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgChannelSelector SVGChannelSelector // out

	_svgChannelSelector = SVGChannelSelector(_cret)

	return _svgChannelSelector
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGChannelSelectorToString(channelSelector SVGChannelSelector) string {
	var _arg1 C.LsmSvgChannelSelector // out
	var _cret *C.char                 // in

	_arg1 = C.LsmSvgChannelSelector(channelSelector)

	_cret = C.lsm_svg_channel_selector_to_string(_arg1)
	runtime.KeepAlive(channelSelector)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGColorFilterTypeFromString(str string) SVGColorFilterType {
	var _arg1 *C.char                 // out
	var _cret C.LsmSvgColorFilterType // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_color_filter_type_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgColorFilterType SVGColorFilterType // out

	_svgColorFilterType = SVGColorFilterType(_cret)

	return _svgColorFilterType
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGColorFilterTypeToString(typ SVGColorFilterType) string {
	var _arg1 C.LsmSvgColorFilterType // out
	var _cret *C.char                 // in

	_arg1 = C.LsmSvgColorFilterType(typ)

	_cret = C.lsm_svg_color_filter_type_to_string(_arg1)
	runtime.KeepAlive(typ)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGCompOpFromString(str string) SVGCompOp {
	var _arg1 *C.char        // out
	var _cret C.LsmSvgCompOp // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_comp_op_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgCompOp SVGCompOp // out

	_svgCompOp = SVGCompOp(_cret)

	return _svgCompOp
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGCompOpToString(compOp SVGCompOp) string {
	var _arg1 C.LsmSvgCompOp // out
	var _cret *C.char        // in

	_arg1 = C.LsmSvgCompOp(compOp)

	_cret = C.lsm_svg_comp_op_to_string(_arg1)
	runtime.KeepAlive(compOp)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGDisplayFromString(str string) SVGDisplay {
	var _arg1 *C.char         // out
	var _cret C.LsmSvgDisplay // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_display_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgDisplay SVGDisplay // out

	_svgDisplay = SVGDisplay(_cret)

	return _svgDisplay
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGDisplayToString(display SVGDisplay) string {
	var _arg1 C.LsmSvgDisplay // out
	var _cret *C.char         // in

	_arg1 = C.LsmSvgDisplay(display)

	_cret = C.lsm_svg_display_to_string(_arg1)
	runtime.KeepAlive(display)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGEdgeModeFromString(str string) SVGEdgeMode {
	var _arg1 *C.char          // out
	var _cret C.LsmSvgEdgeMode // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_edge_mode_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgEdgeMode SVGEdgeMode // out

	_svgEdgeMode = SVGEdgeMode(_cret)

	return _svgEdgeMode
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGEdgeModeToString(edgeMode SVGEdgeMode) string {
	var _arg1 C.LsmSvgEdgeMode // out
	var _cret *C.char          // in

	_arg1 = C.LsmSvgEdgeMode(edgeMode)

	_cret = C.lsm_svg_edge_mode_to_string(_arg1)
	runtime.KeepAlive(edgeMode)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGEnableBackgroundFromString(str string) SVGEnableBackground {
	var _arg1 *C.char                  // out
	var _cret C.LsmSvgEnableBackground // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_enable_background_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgEnableBackground SVGEnableBackground // out

	_svgEnableBackground = SVGEnableBackground(_cret)

	return _svgEnableBackground
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGEnableBackgroundToString(enableBackground SVGEnableBackground) string {
	var _arg1 C.LsmSvgEnableBackground // out
	var _cret *C.char                  // in

	_arg1 = C.LsmSvgEnableBackground(enableBackground)

	_cret = C.lsm_svg_enable_background_to_string(_arg1)
	runtime.KeepAlive(enableBackground)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGFillRuleFromString(str string) SVGFillRule {
	var _arg1 *C.char          // out
	var _cret C.LsmSvgFillRule // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_fill_rule_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgFillRule SVGFillRule // out

	_svgFillRule = SVGFillRule(_cret)

	return _svgFillRule
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGFillRuleToString(fillRule SVGFillRule) string {
	var _arg1 C.LsmSvgFillRule // out
	var _cret *C.char          // in

	_arg1 = C.LsmSvgFillRule(fillRule)

	_cret = C.lsm_svg_fill_rule_to_string(_arg1)
	runtime.KeepAlive(fillRule)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGFontStretchFromString(str string) SVGFontStretch {
	var _arg1 *C.char             // out
	var _cret C.LsmSvgFontStretch // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_font_stretch_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgFontStretch SVGFontStretch // out

	_svgFontStretch = SVGFontStretch(_cret)

	return _svgFontStretch
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGFontStretchToString(fontStretch SVGFontStretch) string {
	var _arg1 C.LsmSvgFontStretch // out
	var _cret *C.char             // in

	_arg1 = C.LsmSvgFontStretch(fontStretch)

	_cret = C.lsm_svg_font_stretch_to_string(_arg1)
	runtime.KeepAlive(fontStretch)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGFontStyleFromString(str string) SVGFontStyle {
	var _arg1 *C.char           // out
	var _cret C.LsmSvgFontStyle // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_font_style_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgFontStyle SVGFontStyle // out

	_svgFontStyle = SVGFontStyle(_cret)

	return _svgFontStyle
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGFontStyleToString(fontStyle SVGFontStyle) string {
	var _arg1 C.LsmSvgFontStyle // out
	var _cret *C.char           // in

	_arg1 = C.LsmSvgFontStyle(fontStyle)

	_cret = C.lsm_svg_font_style_to_string(_arg1)
	runtime.KeepAlive(fontStyle)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGFontWeightFromString(str string) SVGFontWeight {
	var _arg1 *C.char            // out
	var _cret C.LsmSvgFontWeight // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_font_weight_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgFontWeight SVGFontWeight // out

	_svgFontWeight = SVGFontWeight(_cret)

	return _svgFontWeight
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGFontWeightToString(fontWeight SVGFontWeight) string {
	var _arg1 C.LsmSvgFontWeight // out
	var _cret *C.char            // in

	_arg1 = C.LsmSvgFontWeight(fontWeight)

	_cret = C.lsm_svg_font_weight_to_string(_arg1)
	runtime.KeepAlive(fontWeight)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGLengthTypeFromString(str string) SVGLengthType {
	var _arg1 *C.char            // out
	var _cret C.LsmSvgLengthType // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_length_type_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgLengthType SVGLengthType // out

	_svgLengthType = SVGLengthType(_cret)

	return _svgLengthType
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGLengthTypeToString(lengthType SVGLengthType) string {
	var _arg1 C.LsmSvgLengthType // out
	var _cret *C.char            // in

	_arg1 = C.LsmSvgLengthType(lengthType)

	_cret = C.lsm_svg_length_type_to_string(_arg1)
	runtime.KeepAlive(lengthType)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGLineCapFromString(str string) SVGLineCap {
	var _arg1 *C.char         // out
	var _cret C.LsmSvgLineCap // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_line_cap_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgLineCap SVGLineCap // out

	_svgLineCap = SVGLineCap(_cret)

	return _svgLineCap
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGLineCapToString(lineCap SVGLineCap) string {
	var _arg1 C.LsmSvgLineCap // out
	var _cret *C.char         // in

	_arg1 = C.LsmSvgLineCap(lineCap)

	_cret = C.lsm_svg_line_cap_to_string(_arg1)
	runtime.KeepAlive(lineCap)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGLineJoinFromString(str string) SVGLineJoin {
	var _arg1 *C.char          // out
	var _cret C.LsmSvgLineJoin // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_line_join_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgLineJoin SVGLineJoin // out

	_svgLineJoin = SVGLineJoin(_cret)

	return _svgLineJoin
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGLineJoinToString(lineJoin SVGLineJoin) string {
	var _arg1 C.LsmSvgLineJoin // out
	var _cret *C.char          // in

	_arg1 = C.LsmSvgLineJoin(lineJoin)

	_cret = C.lsm_svg_line_join_to_string(_arg1)
	runtime.KeepAlive(lineJoin)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGMarkerUnitsFromString(str string) SVGMarkerUnits {
	var _arg1 *C.char             // out
	var _cret C.LsmSvgMarkerUnits // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_marker_units_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgMarkerUnits SVGMarkerUnits // out

	_svgMarkerUnits = SVGMarkerUnits(_cret)

	return _svgMarkerUnits
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGMarkerUnitsToString(units SVGMarkerUnits) string {
	var _arg1 C.LsmSvgMarkerUnits // out
	var _cret *C.char             // in

	_arg1 = C.LsmSvgMarkerUnits(units)

	_cret = C.lsm_svg_marker_units_to_string(_arg1)
	runtime.KeepAlive(units)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGMeetOrSliceFromString(str string) SVGMeetOrSlice {
	var _arg1 *C.char             // out
	var _cret C.LsmSvgMeetOrSlice // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_meet_or_slice_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgMeetOrSlice SVGMeetOrSlice // out

	_svgMeetOrSlice = SVGMeetOrSlice(_cret)

	return _svgMeetOrSlice
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGMeetOrSliceToString(meetOrSlice SVGMeetOrSlice) string {
	var _arg1 C.LsmSvgMeetOrSlice // out
	var _cret *C.char             // in

	_arg1 = C.LsmSvgMeetOrSlice(meetOrSlice)

	_cret = C.lsm_svg_meet_or_slice_to_string(_arg1)
	runtime.KeepAlive(meetOrSlice)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGMorphologyOperatorFromString(str string) SVGMorphologyOperator {
	var _arg1 *C.char                    // out
	var _cret C.LsmSvgMorphologyOperator // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_morphology_operator_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgMorphologyOperator SVGMorphologyOperator // out

	_svgMorphologyOperator = SVGMorphologyOperator(_cret)

	return _svgMorphologyOperator
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGMorphologyOperatorToString(morpholoyOperator SVGMorphologyOperator) string {
	var _arg1 C.LsmSvgMorphologyOperator // out
	var _cret *C.char                    // in

	_arg1 = C.LsmSvgMorphologyOperator(morpholoyOperator)

	_cret = C.lsm_svg_morphology_operator_to_string(_arg1)
	runtime.KeepAlive(morpholoyOperator)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGOverflowFromString(str string) SVGOverflow {
	var _arg1 *C.char          // out
	var _cret C.LsmSvgOverflow // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_overflow_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgOverflow SVGOverflow // out

	_svgOverflow = SVGOverflow(_cret)

	return _svgOverflow
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGOverflowToString(overflow SVGOverflow) string {
	var _arg1 C.LsmSvgOverflow // out
	var _cret *C.char          // in

	_arg1 = C.LsmSvgOverflow(overflow)

	_cret = C.lsm_svg_overflow_to_string(_arg1)
	runtime.KeepAlive(overflow)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGPatternUnitsFromString(str string) SVGPatternUnits {
	var _arg1 *C.char              // out
	var _cret C.LsmSvgPatternUnits // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_pattern_units_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgPatternUnits SVGPatternUnits // out

	_svgPatternUnits = SVGPatternUnits(_cret)

	return _svgPatternUnits
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGPatternUnitsToString(units SVGPatternUnits) string {
	var _arg1 C.LsmSvgPatternUnits // out
	var _cret *C.char              // in

	_arg1 = C.LsmSvgPatternUnits(units)

	_cret = C.lsm_svg_pattern_units_to_string(_arg1)
	runtime.KeepAlive(units)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGSpreadMethodFromString(str string) SVGSpreadMethod {
	var _arg1 *C.char              // out
	var _cret C.LsmSvgSpreadMethod // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_spread_method_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgSpreadMethod SVGSpreadMethod // out

	_svgSpreadMethod = SVGSpreadMethod(_cret)

	return _svgSpreadMethod
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGSpreadMethodToString(method SVGSpreadMethod) string {
	var _arg1 C.LsmSvgSpreadMethod // out
	var _cret *C.char              // in

	_arg1 = C.LsmSvgSpreadMethod(method)

	_cret = C.lsm_svg_spread_method_to_string(_arg1)
	runtime.KeepAlive(method)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGStitchTilesFromString(str string) SVGStitchTiles {
	var _arg1 *C.char             // out
	var _cret C.LsmSvgStitchTiles // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_stitch_tiles_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgStitchTiles SVGStitchTiles // out

	_svgStitchTiles = SVGStitchTiles(_cret)

	return _svgStitchTiles
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGStitchTilesToString(stitchTiles SVGStitchTiles) string {
	var _arg1 C.LsmSvgStitchTiles // out
	var _cret *C.char             // in

	_arg1 = C.LsmSvgStitchTiles(stitchTiles)

	_cret = C.lsm_svg_stitch_tiles_to_string(_arg1)
	runtime.KeepAlive(stitchTiles)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGTextAnchorFromString(str string) SVGTextAnchor {
	var _arg1 *C.char            // out
	var _cret C.LsmSvgTextAnchor // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_text_anchor_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgTextAnchor SVGTextAnchor // out

	_svgTextAnchor = SVGTextAnchor(_cret)

	return _svgTextAnchor
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGTextAnchorToString(textAnchor SVGTextAnchor) string {
	var _arg1 C.LsmSvgTextAnchor // out
	var _cret *C.char            // in

	_arg1 = C.LsmSvgTextAnchor(textAnchor)

	_cret = C.lsm_svg_text_anchor_to_string(_arg1)
	runtime.KeepAlive(textAnchor)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGTurbulenceTypeFromString(str string) SVGTurbulenceType {
	var _arg1 *C.char                // out
	var _cret C.LsmSvgTurbulenceType // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_turbulence_type_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgTurbulenceType SVGTurbulenceType // out

	_svgTurbulenceType = SVGTurbulenceType(_cret)

	return _svgTurbulenceType
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGTurbulenceTypeToString(turbulenceType SVGTurbulenceType) string {
	var _arg1 C.LsmSvgTurbulenceType // out
	var _cret *C.char                // in

	_arg1 = C.LsmSvgTurbulenceType(turbulenceType)

	_cret = C.lsm_svg_turbulence_type_to_string(_arg1)
	runtime.KeepAlive(turbulenceType)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGVisibilityFromString(str string) SVGVisibility {
	var _arg1 *C.char            // out
	var _cret C.LsmSvgVisibility // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_visibility_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgVisibility SVGVisibility // out

	_svgVisibility = SVGVisibility(_cret)

	return _svgVisibility
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGVisibilityToString(visibility SVGVisibility) string {
	var _arg1 C.LsmSvgVisibility // out
	var _cret *C.char            // in

	_arg1 = C.LsmSvgVisibility(visibility)

	_cret = C.lsm_svg_visibility_to_string(_arg1)
	runtime.KeepAlive(visibility)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGWritingModeFromString(str string) SVGWritingMode {
	var _arg1 *C.char             // out
	var _cret C.LsmSvgWritingMode // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_svg_writing_mode_from_string(_arg1)
	runtime.KeepAlive(str)

	var _svgWritingMode SVGWritingMode // out

	_svgWritingMode = SVGWritingMode(_cret)

	return _svgWritingMode
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func SVGWritingModeToString(writingMode SVGWritingMode) string {
	var _arg1 C.LsmSvgWritingMode // out
	var _cret *C.char             // in

	_arg1 = C.LsmSvgWritingMode(writingMode)

	_cret = C.lsm_svg_writing_mode_to_string(_arg1)
	runtime.KeepAlive(writingMode)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

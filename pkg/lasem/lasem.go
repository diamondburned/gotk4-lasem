// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"fmt"
	_ "runtime/cgo"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: lasem-0.4
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
import "C"

// glib.Type values for lasem.go.
var (
	GTypeDebugLevel  = externglib.Type(C.lsm_debug_level_get_type())
	GTypeDOMNodeType = externglib.Type(C.lsm_dom_node_type_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeDebugLevel, F: marshalDebugLevel},
		{T: GTypeDOMNodeType, F: marshalDOMNodeType},
	})
}

type DebugLevel C.gint

const (
	DebugLevelNone DebugLevel = iota
	DebugLevelWarning
	DebugLevelDebug
	DebugLevelLog
	DebugLevelCount
)

func marshalDebugLevel(p uintptr) (interface{}, error) {
	return DebugLevel(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for DebugLevel.
func (d DebugLevel) String() string {
	switch d {
	case DebugLevelNone:
		return "None"
	case DebugLevelWarning:
		return "Warning"
	case DebugLevelDebug:
		return "Debug"
	case DebugLevelLog:
		return "Log"
	case DebugLevelCount:
		return "Count"
	default:
		return fmt.Sprintf("DebugLevel(%d)", d)
	}
}

type DOMNodeType C.gint

const (
	DOMNodeTypeElementNode               DOMNodeType = 1
	DOMNodeTypeAttributeNode             DOMNodeType = 2
	DOMNodeTypeTextNode                  DOMNodeType = 3
	DOMNodeTypeCdataSectionNode          DOMNodeType = 4
	DOMNodeTypeEntityReferenceNode       DOMNodeType = 5
	DOMNodeTypeEntityNode                DOMNodeType = 6
	DOMNodeTypeProcessingInstructionNode DOMNodeType = 7
	DOMNodeTypeCommentNode               DOMNodeType = 8
	DOMNodeTypeDocumentNode              DOMNodeType = 9
	DOMNodeTypeDocumentTypeNode          DOMNodeType = 10
	DOMNodeTypeDocumentFragmentNode      DOMNodeType = 11
	DOMNodeTypeNotationNode              DOMNodeType = 12
)

func marshalDOMNodeType(p uintptr) (interface{}, error) {
	return DOMNodeType(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for DOMNodeType.
func (d DOMNodeType) String() string {
	switch d {
	case DOMNodeTypeElementNode:
		return "ElementNode"
	case DOMNodeTypeAttributeNode:
		return "AttributeNode"
	case DOMNodeTypeTextNode:
		return "TextNode"
	case DOMNodeTypeCdataSectionNode:
		return "CdataSectionNode"
	case DOMNodeTypeEntityReferenceNode:
		return "EntityReferenceNode"
	case DOMNodeTypeEntityNode:
		return "EntityNode"
	case DOMNodeTypeProcessingInstructionNode:
		return "ProcessingInstructionNode"
	case DOMNodeTypeCommentNode:
		return "CommentNode"
	case DOMNodeTypeDocumentNode:
		return "DocumentNode"
	case DOMNodeTypeDocumentTypeNode:
		return "DocumentTypeNode"
	case DOMNodeTypeDocumentFragmentNode:
		return "DocumentFragmentNode"
	case DOMNodeTypeNotationNode:
		return "NotationNode"
	default:
		return fmt.Sprintf("DOMNodeType(%d)", d)
	}
}

// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
import "C"

// glib.Type values for lsmdomdocumentfragment.go.
var GTypeDOMDocumentFragment = externglib.Type(C.lsm_dom_document_fragment_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeDOMDocumentFragment, F: marshalDOMDocumentFragment},
	})
}

// DOMDocumentFragmentOverrider contains methods that are overridable.
type DOMDocumentFragmentOverrider interface {
}

type DOMDocumentFragment struct {
	_ [0]func() // equal guard
	DOMNode
}

var (
	_ DOMNoder = (*DOMDocumentFragment)(nil)
)

// DOMDocumentFragmenter describes types inherited from class DOMDocumentFragment.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type DOMDocumentFragmenter interface {
	externglib.Objector
	baseDOMDocumentFragment() *DOMDocumentFragment
}

var _ DOMDocumentFragmenter = (*DOMDocumentFragment)(nil)

func classInitDOMDocumentFragmenter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapDOMDocumentFragment(obj *externglib.Object) *DOMDocumentFragment {
	return &DOMDocumentFragment{
		DOMNode: DOMNode{
			Object: obj,
		},
	}
}

func marshalDOMDocumentFragment(p uintptr) (interface{}, error) {
	return wrapDOMDocumentFragment(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *DOMDocumentFragment) baseDOMDocumentFragment() *DOMDocumentFragment {
	return v
}

// BaseDOMDocumentFragment returns the underlying base object.
func BaseDOMDocumentFragment(obj DOMDocumentFragmenter) *DOMDocumentFragment {
	return obj.baseDOMDocumentFragment()
}

// The function returns the following values:
//
func NewDOMDocumentFragment() *DOMDocumentFragment {
	var _cret *C.LsmDomDocumentFragment // in

	_cret = C.lsm_dom_document_fragment_new()

	var _domDocumentFragment *DOMDocumentFragment // out

	_domDocumentFragment = wrapDOMDocumentFragment(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domDocumentFragment
}

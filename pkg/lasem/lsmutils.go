// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// glib.Type values for lsmutils.go.
var (
	GTypeBox     = externglib.Type(C.lsm_box_get_type())
	GTypeExtents = externglib.Type(C.lsm_extents_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeBox, F: marshalBox},
		{T: GTypeExtents, F: marshalExtents},
	})
}

// Box: instance of this type is always passed by reference.
type Box struct {
	*box
}

// box is the struct that's finalized.
type box struct {
	native *C.LsmBox
}

func marshalBox(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Box{&box{(*C.LsmBox)(b)}}, nil
}

// NewBox creates a new Box instance from the given
// fields.
func NewBox(x, y, width, height float64) Box {
	var f0 C.double // out
	f0 = C.double(x)
	var f1 C.double // out
	f1 = C.double(y)
	var f2 C.double // out
	f2 = C.double(width)
	var f3 C.double // out
	f3 = C.double(height)

	v := C.LsmBox{
		x:      f0,
		y:      f1,
		width:  f2,
		height: f3,
	}

	return *(*Box)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

func (b *Box) X() float64 {
	var v float64 // out
	v = float64(b.native.x)
	return v
}

func (b *Box) Y() float64 {
	var v float64 // out
	v = float64(b.native.y)
	return v
}

func (b *Box) Width() float64 {
	var v float64 // out
	v = float64(b.native.width)
	return v
}

func (b *Box) Height() float64 {
	var v float64 // out
	v = float64(b.native.height)
	return v
}

// Extents: instance of this type is always passed by reference.
type Extents struct {
	*extents
}

// extents is the struct that's finalized.
type extents struct {
	native *C.LsmExtents
}

func marshalExtents(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Extents{&extents{(*C.LsmExtents)(b)}}, nil
}

// NewExtents creates a new Extents instance from the given
// fields.
func NewExtents(x1, y1, x2, y2 float64) Extents {
	var f0 C.double // out
	f0 = C.double(x1)
	var f1 C.double // out
	f1 = C.double(y1)
	var f2 C.double // out
	f2 = C.double(x2)
	var f3 C.double // out
	f3 = C.double(y2)

	v := C.LsmExtents{
		x1: f0,
		y1: f1,
		x2: f2,
		y2: f3,
	}

	return *(*Extents)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

func (e *Extents) X1() float64 {
	var v float64 // out
	v = float64(e.native.x1)
	return v
}

func (e *Extents) Y1() float64 {
	var v float64 // out
	v = float64(e.native.y1)
	return v
}

func (e *Extents) X2() float64 {
	var v float64 // out
	v = float64(e.native.x2)
	return v
}

func (e *Extents) Y2() float64 {
	var v float64 // out
	v = float64(e.native.y2)
	return v
}

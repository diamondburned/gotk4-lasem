// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// extern LsmDomNode* _gotk4_lasem0_DomNodeListClass_get_item(LsmDomNodeList*, unsigned int);
// extern unsigned int _gotk4_lasem0_DomNodeListClass_get_length(LsmDomNodeList*);
import "C"

// glib.Type values for lsmdomnodelist.go.
var GTypeDOMNodeList = externglib.Type(C.lsm_dom_node_list_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeDOMNodeList, F: marshalDOMNodeList},
	})
}

// DOMNodeListOverrider contains methods that are overridable.
type DOMNodeListOverrider interface {
	// The function takes the following parameters:
	//
	//    - index: id of the item to retrieve.
	//
	// The function returns the following values:
	//
	//    - domNode: node corresponding to index, NULL on error.
	//
	Item(index uint) DOMNoder
	// The function returns the following values:
	//
	Length() uint
}

type DOMNodeList struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*DOMNodeList)(nil)
)

// DOMNodeLister describes types inherited from class DOMNodeList.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type DOMNodeLister interface {
	externglib.Objector
	baseDOMNodeList() *DOMNodeList
}

var _ DOMNodeLister = (*DOMNodeList)(nil)

func classInitDOMNodeLister(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.LsmDomNodeListClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.LsmDomNodeListClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Item(index uint) DOMNoder }); ok {
		pclass.get_item = (*[0]byte)(C._gotk4_lasem0_DomNodeListClass_get_item)
	}

	if _, ok := goval.(interface{ Length() uint }); ok {
		pclass.get_length = (*[0]byte)(C._gotk4_lasem0_DomNodeListClass_get_length)
	}
}

//export _gotk4_lasem0_DomNodeListClass_get_item
func _gotk4_lasem0_DomNodeListClass_get_item(arg0 *C.LsmDomNodeList, arg1 C.uint) (cret *C.LsmDomNode) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Item(index uint) DOMNoder })

	var _index uint // out

	_index = uint(arg1)

	domNode := iface.Item(_index)

	cret = (*C.LsmDomNode)(unsafe.Pointer(externglib.InternObject(domNode).Native()))

	return cret
}

//export _gotk4_lasem0_DomNodeListClass_get_length
func _gotk4_lasem0_DomNodeListClass_get_length(arg0 *C.LsmDomNodeList) (cret C.uint) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Length() uint })

	guint := iface.Length()

	cret = C.uint(guint)

	return cret
}

func wrapDOMNodeList(obj *externglib.Object) *DOMNodeList {
	return &DOMNodeList{
		Object: obj,
	}
}

func marshalDOMNodeList(p uintptr) (interface{}, error) {
	return wrapDOMNodeList(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (list *DOMNodeList) baseDOMNodeList() *DOMNodeList {
	return list
}

// BaseDOMNodeList returns the underlying base object.
func BaseDOMNodeList(obj DOMNodeLister) *DOMNodeList {
	return obj.baseDOMNodeList()
}

// The function takes the following parameters:
//
//    - index: id of the item to retrieve.
//
// The function returns the following values:
//
//    - domNode: node corresponding to index, NULL on error.
//
func (list *DOMNodeList) Item(index uint) DOMNoder {
	var _arg0 *C.LsmDomNodeList // out
	var _arg1 C.uint            // out
	var _cret *C.LsmDomNode     // in

	_arg0 = (*C.LsmDomNodeList)(unsafe.Pointer(externglib.InternObject(list).Native()))
	_arg1 = C.uint(index)

	_cret = C.lsm_dom_node_list_get_item(_arg0, _arg1)
	runtime.KeepAlive(list)
	runtime.KeepAlive(index)

	var _domNode DOMNoder // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type lasem.DOMNoder is nil")
		}

		object := externglib.Take(objptr)
		casted := object.WalkCast(func(obj externglib.Objector) bool {
			_, ok := obj.(DOMNoder)
			return ok
		})
		rv, ok := casted.(DOMNoder)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching lasem.DOMNoder")
		}
		_domNode = rv
	}

	return _domNode
}

// The function returns the following values:
//
func (list *DOMNodeList) Length() uint {
	var _arg0 *C.LsmDomNodeList // out
	var _cret C.uint            // in

	_arg0 = (*C.LsmDomNodeList)(unsafe.Pointer(externglib.InternObject(list).Native()))

	_cret = C.lsm_dom_node_list_get_length(_arg0)
	runtime.KeepAlive(list)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

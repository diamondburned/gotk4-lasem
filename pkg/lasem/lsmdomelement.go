// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// extern char* _gotk4_lasem0_DomElementClass_get_attribute(LsmDomElement*, char*);
// extern char* _gotk4_lasem0_DomElementClass_get_serialized_attributes(LsmDomElement*);
// extern void _gotk4_lasem0_DomElementClass_set_attribute(LsmDomElement*, char*, char*);
import "C"

// glib.Type values for lsmdomelement.go.
var GTypeDOMElement = externglib.Type(C.lsm_dom_element_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeDOMElement, F: marshalDOMElement},
	})
}

// DOMElementOverrider contains methods that are overridable.
type DOMElementOverrider interface {
	// The function takes the following parameters:
	//
	//    - name: attribute name.
	//
	// The function returns the following values:
	//
	//    - utf8: attribute value, as string.
	//
	Attribute(name string) string
	// The function returns the following values:
	//
	SerializedAttributes() string
	// SetAttribute: set the atribute value.
	//
	// The function takes the following parameters:
	//
	//    - name: attribute name.
	//    - attributeValue: attribute value as string.
	//
	SetAttribute(name, attributeValue string)
}

type DOMElement struct {
	_ [0]func() // equal guard
	DOMNode
}

var (
	_ DOMNoder = (*DOMElement)(nil)
)

// DOMElementer describes types inherited from class DOMElement.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type DOMElementer interface {
	externglib.Objector
	baseDOMElement() *DOMElement
}

var _ DOMElementer = (*DOMElement)(nil)

func classInitDOMElementer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.LsmDomElementClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.LsmDomElementClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ Attribute(name string) string }); ok {
		pclass.get_attribute = (*[0]byte)(C._gotk4_lasem0_DomElementClass_get_attribute)
	}

	if _, ok := goval.(interface{ SerializedAttributes() string }); ok {
		pclass.get_serialized_attributes = (*[0]byte)(C._gotk4_lasem0_DomElementClass_get_serialized_attributes)
	}

	if _, ok := goval.(interface {
		SetAttribute(name, attributeValue string)
	}); ok {
		pclass.set_attribute = (*[0]byte)(C._gotk4_lasem0_DomElementClass_set_attribute)
	}
}

//export _gotk4_lasem0_DomElementClass_get_attribute
func _gotk4_lasem0_DomElementClass_get_attribute(arg0 *C.LsmDomElement, arg1 *C.char) (cret *C.char) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Attribute(name string) string })

	var _name string // out

	_name = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	utf8 := iface.Attribute(_name)

	cret = (*C.char)(unsafe.Pointer(C.CString(utf8)))
	defer C.free(unsafe.Pointer(cret))

	return cret
}

//export _gotk4_lasem0_DomElementClass_get_serialized_attributes
func _gotk4_lasem0_DomElementClass_get_serialized_attributes(arg0 *C.LsmDomElement) (cret *C.char) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ SerializedAttributes() string })

	utf8 := iface.SerializedAttributes()

	cret = (*C.char)(unsafe.Pointer(C.CString(utf8)))

	return cret
}

//export _gotk4_lasem0_DomElementClass_set_attribute
func _gotk4_lasem0_DomElementClass_set_attribute(arg0 *C.LsmDomElement, arg1 *C.char, arg2 *C.char) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		SetAttribute(name, attributeValue string)
	})

	var _name string           // out
	var _attributeValue string // out

	_name = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_attributeValue = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))

	iface.SetAttribute(_name, _attributeValue)
}

func wrapDOMElement(obj *externglib.Object) *DOMElement {
	return &DOMElement{
		DOMNode: DOMNode{
			Object: obj,
		},
	}
}

func marshalDOMElement(p uintptr) (interface{}, error) {
	return wrapDOMElement(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *DOMElement) baseDOMElement() *DOMElement {
	return self
}

// BaseDOMElement returns the underlying base object.
func BaseDOMElement(obj DOMElementer) *DOMElement {
	return obj.baseDOMElement()
}

// The function takes the following parameters:
//
//    - name: attribute name.
//
// The function returns the following values:
//
//    - utf8: attribute value, as string.
//
func (self *DOMElement) Attribute(name string) string {
	var _arg0 *C.LsmDomElement // out
	var _arg1 *C.char          // out
	var _cret *C.char          // in

	_arg0 = (*C.LsmDomElement)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_dom_element_get_attribute(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
//    - utf8: element tag name.
//
func (self *DOMElement) TagName() string {
	var _arg0 *C.LsmDomElement // out
	var _cret *C.char          // in

	_arg0 = (*C.LsmDomElement)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.lsm_dom_element_get_tag_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SetAttribute: set the atribute value.
//
// The function takes the following parameters:
//
//    - name: attribute name.
//    - attributeValue: attribute value as string.
//
func (self *DOMElement) SetAttribute(name, attributeValue string) {
	var _arg0 *C.LsmDomElement // out
	var _arg1 *C.char          // out
	var _arg2 *C.char          // out

	_arg0 = (*C.LsmDomElement)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(attributeValue)))
	defer C.free(unsafe.Pointer(_arg2))

	C.lsm_dom_element_set_attribute(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)
	runtime.KeepAlive(attributeValue)
}

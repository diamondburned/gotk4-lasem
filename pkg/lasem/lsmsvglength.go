// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// SVGAnimatedLength: instance of this type is always passed by reference.
type SVGAnimatedLength struct {
	*svgAnimatedLength
}

// svgAnimatedLength is the struct that's finalized.
type svgAnimatedLength struct {
	native *C.LsmSvgAnimatedLength
}

func (s *SVGAnimatedLength) Base() *SVGLength {
	var v *SVGLength // out
	v = (*SVGLength)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGAnimatedLength) Animated() *SVGLength {
	var v *SVGLength // out
	v = (*SVGLength)(gextras.NewStructNative(unsafe.Pointer((&s.native.animated))))
	return v
}

// SVGLength: instance of this type is always passed by reference.
type SVGLength struct {
	*svgLength
}

// svgLength is the struct that's finalized.
type svgLength struct {
	native *C.LsmSvgLength
}

func (s *SVGLength) ValueUnit() float64 {
	var v float64 // out
	v = float64(s.native.value_unit)
	return v
}

func (s *SVGLength) Type() SVGLengthType {
	var v SVGLengthType // out
	v = SVGLengthType(s.native._type)
	return v
}

// The function takes the following parameters:
//
//    - viewbox
//    - fontSize
//    - direction
//
// The function returns the following values:
//
func (length *SVGLength) Normalize(viewbox *SVGViewbox, fontSize float64, direction SVGLengthDirection) float64 {
	var _arg0 *C.LsmSvgLength         // out
	var _arg1 *C.LsmSvgViewbox        // out
	var _arg2 C.double                // out
	var _arg3 C.LsmSvgLengthDirection // out
	var _cret C.double                // in

	_arg0 = (*C.LsmSvgLength)(gextras.StructNative(unsafe.Pointer(length)))
	_arg1 = (*C.LsmSvgViewbox)(gextras.StructNative(unsafe.Pointer(viewbox)))
	_arg2 = C.double(fontSize)
	_arg3 = C.LsmSvgLengthDirection(direction)

	_cret = C.lsm_svg_length_normalize(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(length)
	runtime.KeepAlive(viewbox)
	runtime.KeepAlive(fontSize)
	runtime.KeepAlive(direction)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// SVGLengthList: instance of this type is always passed by reference.
type SVGLengthList struct {
	*svgLengthList
}

// svgLengthList is the struct that's finalized.
type svgLengthList struct {
	native *C.LsmSvgLengthList
}

func (s *SVGLengthList) NLengths() uint {
	var v uint // out
	v = uint(s.native.n_lengths)
	return v
}

func (s *SVGLengthList) Lengths() *SVGLength {
	var v *SVGLength // out
	v = (*SVGLength)(gextras.NewStructNative(unsafe.Pointer(s.native.lengths)))
	return v
}

// SVGViewbox: instance of this type is always passed by reference.
type SVGViewbox struct {
	*svgViewbox
}

// svgViewbox is the struct that's finalized.
type svgViewbox struct {
	native *C.LsmSvgViewbox
}

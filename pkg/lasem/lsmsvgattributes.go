// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// SVGAngleAttribute: instance of this type is always passed by reference.
type SVGAngleAttribute struct {
	*svgAngleAttribute
}

// svgAngleAttribute is the struct that's finalized.
type svgAngleAttribute struct {
	native *C.LsmSvgAngleAttribute
}

func (s *SVGAngleAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGAngleAttribute) Value() *SVGAngle {
	var v *SVGAngle // out
	v = (*SVGAngle)(gextras.NewStructNative(unsafe.Pointer((&s.native.value))))
	return v
}

// SVGBlendingModeAttribute: instance of this type is always passed by
// reference.
type SVGBlendingModeAttribute struct {
	*svgBlendingModeAttribute
}

// svgBlendingModeAttribute is the struct that's finalized.
type svgBlendingModeAttribute struct {
	native *C.LsmSvgBlendingModeAttribute
}

func (s *SVGBlendingModeAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGBlendingModeAttribute) Value() SVGBlendingMode {
	var v SVGBlendingMode // out
	v = SVGBlendingMode(s.native.value)
	return v
}

// SVGBooleanAttribute: instance of this type is always passed by reference.
type SVGBooleanAttribute struct {
	*svgBooleanAttribute
}

// svgBooleanAttribute is the struct that's finalized.
type svgBooleanAttribute struct {
	native *C.LsmSvgBooleanAttribute
}

func (s *SVGBooleanAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGBooleanAttribute) Value() bool {
	var v bool // out
	if s.native.value != 0 {
		v = true
	}
	return v
}

// SVGChannelSelectorAttribute: instance of this type is always passed by
// reference.
type SVGChannelSelectorAttribute struct {
	*svgChannelSelectorAttribute
}

// svgChannelSelectorAttribute is the struct that's finalized.
type svgChannelSelectorAttribute struct {
	native *C.LsmSvgChannelSelectorAttribute
}

func (s *SVGChannelSelectorAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGChannelSelectorAttribute) Value() SVGChannelSelector {
	var v SVGChannelSelector // out
	v = SVGChannelSelector(s.native.value)
	return v
}

// SVGColorAttribute: instance of this type is always passed by reference.
type SVGColorAttribute struct {
	*svgColorAttribute
}

// svgColorAttribute is the struct that's finalized.
type svgColorAttribute struct {
	native *C.LsmSvgColorAttribute
}

func (s *SVGColorAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGColorAttribute) Value() *SVGColor {
	var v *SVGColor // out
	v = (*SVGColor)(gextras.NewStructNative(unsafe.Pointer((&s.native.value))))
	return v
}

// SVGColorFilterTypeAttribute: instance of this type is always passed by
// reference.
type SVGColorFilterTypeAttribute struct {
	*svgColorFilterTypeAttribute
}

// svgColorFilterTypeAttribute is the struct that's finalized.
type svgColorFilterTypeAttribute struct {
	native *C.LsmSvgColorFilterTypeAttribute
}

func (s *SVGColorFilterTypeAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGColorFilterTypeAttribute) Value() SVGColorFilterType {
	var v SVGColorFilterType // out
	v = SVGColorFilterType(s.native.value)
	return v
}

// SVGDashArrayAttribute: instance of this type is always passed by reference.
type SVGDashArrayAttribute struct {
	*svgDashArrayAttribute
}

// svgDashArrayAttribute is the struct that's finalized.
type svgDashArrayAttribute struct {
	native *C.LsmSvgDashArrayAttribute
}

func (s *SVGDashArrayAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGDashArrayAttribute) Value() *SVGDashArray {
	var v *SVGDashArray // out
	v = (*SVGDashArray)(gextras.NewStructNative(unsafe.Pointer(s.native.value)))
	return v
}

// SVGDoubleAttribute: instance of this type is always passed by reference.
type SVGDoubleAttribute struct {
	*svgDoubleAttribute
}

// svgDoubleAttribute is the struct that's finalized.
type svgDoubleAttribute struct {
	native *C.LsmSvgDoubleAttribute
}

func (s *SVGDoubleAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGDoubleAttribute) Value() float64 {
	var v float64 // out
	v = float64(s.native.value)
	return v
}

// SVGEdgeModeAttribute: instance of this type is always passed by reference.
type SVGEdgeModeAttribute struct {
	*svgEdgeModeAttribute
}

// svgEdgeModeAttribute is the struct that's finalized.
type svgEdgeModeAttribute struct {
	native *C.LsmSvgEdgeModeAttribute
}

func (s *SVGEdgeModeAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGEdgeModeAttribute) Value() SVGEdgeMode {
	var v SVGEdgeMode // out
	v = SVGEdgeMode(s.native.value)
	return v
}

// SVGIntegerAttribute: instance of this type is always passed by reference.
type SVGIntegerAttribute struct {
	*svgIntegerAttribute
}

// svgIntegerAttribute is the struct that's finalized.
type svgIntegerAttribute struct {
	native *C.LsmSvgIntegerAttribute
}

func (s *SVGIntegerAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGIntegerAttribute) Value() int {
	var v int // out
	v = int(s.native.value)
	return v
}

// SVGLengthAttribute: instance of this type is always passed by reference.
type SVGLengthAttribute struct {
	*svgLengthAttribute
}

// svgLengthAttribute is the struct that's finalized.
type svgLengthAttribute struct {
	native *C.LsmSvgLengthAttribute
}

func (s *SVGLengthAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGLengthAttribute) Length() *SVGLength {
	var v *SVGLength // out
	v = (*SVGLength)(gextras.NewStructNative(unsafe.Pointer((&s.native.length))))
	return v
}

// SVGLengthListAttribute: instance of this type is always passed by reference.
type SVGLengthListAttribute struct {
	*svgLengthListAttribute
}

// svgLengthListAttribute is the struct that's finalized.
type svgLengthListAttribute struct {
	native *C.LsmSvgLengthListAttribute
}

func (s *SVGLengthListAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGLengthListAttribute) List() *SVGLengthList {
	var v *SVGLengthList // out
	v = (*SVGLengthList)(gextras.NewStructNative(unsafe.Pointer((&s.native.list))))
	return v
}

// SVGMarkerUnitsAttribute: instance of this type is always passed by reference.
type SVGMarkerUnitsAttribute struct {
	*svgMarkerUnitsAttribute
}

// svgMarkerUnitsAttribute is the struct that's finalized.
type svgMarkerUnitsAttribute struct {
	native *C.LsmSvgMarkerUnitsAttribute
}

func (s *SVGMarkerUnitsAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGMarkerUnitsAttribute) Value() SVGMarkerUnits {
	var v SVGMarkerUnits // out
	v = SVGMarkerUnits(s.native.value)
	return v
}

// SVGMorphologyOperatorAttribute: instance of this type is always passed by
// reference.
type SVGMorphologyOperatorAttribute struct {
	*svgMorphologyOperatorAttribute
}

// svgMorphologyOperatorAttribute is the struct that's finalized.
type svgMorphologyOperatorAttribute struct {
	native *C.LsmSvgMorphologyOperatorAttribute
}

func (s *SVGMorphologyOperatorAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGMorphologyOperatorAttribute) Value() SVGMorphologyOperator {
	var v SVGMorphologyOperator // out
	v = SVGMorphologyOperator(s.native.value)
	return v
}

// SVGOneOrTwoDoubleAttribute: instance of this type is always passed by
// reference.
type SVGOneOrTwoDoubleAttribute struct {
	*svgOneOrTwoDoubleAttribute
}

// svgOneOrTwoDoubleAttribute is the struct that's finalized.
type svgOneOrTwoDoubleAttribute struct {
	native *C.LsmSvgOneOrTwoDoubleAttribute
}

func (s *SVGOneOrTwoDoubleAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGOneOrTwoDoubleAttribute) Value() *SVGOneOrTwoDouble {
	var v *SVGOneOrTwoDouble // out
	v = (*SVGOneOrTwoDouble)(gextras.NewStructNative(unsafe.Pointer((&s.native.value))))
	return v
}

// SVGOneOrTwoIntegerAttribute: instance of this type is always passed by
// reference.
type SVGOneOrTwoIntegerAttribute struct {
	*svgOneOrTwoIntegerAttribute
}

// svgOneOrTwoIntegerAttribute is the struct that's finalized.
type svgOneOrTwoIntegerAttribute struct {
	native *C.LsmSvgOneOrTwoIntegerAttribute
}

func (s *SVGOneOrTwoIntegerAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGOneOrTwoIntegerAttribute) Value() *SVGOneOrTwoInteger {
	var v *SVGOneOrTwoInteger // out
	v = (*SVGOneOrTwoInteger)(gextras.NewStructNative(unsafe.Pointer((&s.native.value))))
	return v
}

// SVGPaintAttribute: instance of this type is always passed by reference.
type SVGPaintAttribute struct {
	*svgPaintAttribute
}

// svgPaintAttribute is the struct that's finalized.
type svgPaintAttribute struct {
	native *C.LsmSvgPaintAttribute
}

func (s *SVGPaintAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGPaintAttribute) Paint() *SVGPaint {
	var v *SVGPaint // out
	v = (*SVGPaint)(gextras.NewStructNative(unsafe.Pointer((&s.native.paint))))
	return v
}

// SVGPatternUnitsAttribute: instance of this type is always passed by
// reference.
type SVGPatternUnitsAttribute struct {
	*svgPatternUnitsAttribute
}

// svgPatternUnitsAttribute is the struct that's finalized.
type svgPatternUnitsAttribute struct {
	native *C.LsmSvgPatternUnitsAttribute
}

func (s *SVGPatternUnitsAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGPatternUnitsAttribute) Value() SVGPatternUnits {
	var v SVGPatternUnits // out
	v = SVGPatternUnits(s.native.value)
	return v
}

// SVGPreserveAspectRatioAttribute: instance of this type is always passed by
// reference.
type SVGPreserveAspectRatioAttribute struct {
	*svgPreserveAspectRatioAttribute
}

// svgPreserveAspectRatioAttribute is the struct that's finalized.
type svgPreserveAspectRatioAttribute struct {
	native *C.LsmSvgPreserveAspectRatioAttribute
}

func (s *SVGPreserveAspectRatioAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGPreserveAspectRatioAttribute) Value() *SVGPreserveAspectRatio {
	var v *SVGPreserveAspectRatio // out
	v = (*SVGPreserveAspectRatio)(gextras.NewStructNative(unsafe.Pointer((&s.native.value))))
	return v
}

// SVGSpreadMethodAtttribute: instance of this type is always passed by
// reference.
type SVGSpreadMethodAtttribute struct {
	*svgSpreadMethodAtttribute
}

// svgSpreadMethodAtttribute is the struct that's finalized.
type svgSpreadMethodAtttribute struct {
	native *C.LsmSvgSpreadMethodAtttribute
}

func (s *SVGSpreadMethodAtttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGSpreadMethodAtttribute) Value() SVGSpreadMethod {
	var v SVGSpreadMethod // out
	v = SVGSpreadMethod(s.native.value)
	return v
}

// SVGStitchTilesAttribute: instance of this type is always passed by reference.
type SVGStitchTilesAttribute struct {
	*svgStitchTilesAttribute
}

// svgStitchTilesAttribute is the struct that's finalized.
type svgStitchTilesAttribute struct {
	native *C.LsmSvgStitchTilesAttribute
}

func (s *SVGStitchTilesAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGStitchTilesAttribute) Value() SVGStitchTiles {
	var v SVGStitchTiles // out
	v = SVGStitchTiles(s.native.value)
	return v
}

// SVGStringAttribute: instance of this type is always passed by reference.
type SVGStringAttribute struct {
	*svgStringAttribute
}

// svgStringAttribute is the struct that's finalized.
type svgStringAttribute struct {
	native *C.LsmSvgStringAttribute
}

func (s *SVGStringAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGStringAttribute) Value() string {
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(s.native.value)))
	return v
}

// SVGTransformAttribute: instance of this type is always passed by reference.
type SVGTransformAttribute struct {
	*svgTransformAttribute
}

// svgTransformAttribute is the struct that's finalized.
type svgTransformAttribute struct {
	native *C.LsmSvgTransformAttribute
}

func (s *SVGTransformAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGTransformAttribute) Matrix() *SVGMatrix {
	var v *SVGMatrix // out
	v = (*SVGMatrix)(gextras.NewStructNative(unsafe.Pointer((&s.native.matrix))))
	return v
}

// SVGTurbulenceTypeAttribute: instance of this type is always passed by
// reference.
type SVGTurbulenceTypeAttribute struct {
	*svgTurbulenceTypeAttribute
}

// svgTurbulenceTypeAttribute is the struct that's finalized.
type svgTurbulenceTypeAttribute struct {
	native *C.LsmSvgTurbulenceTypeAttribute
}

func (s *SVGTurbulenceTypeAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGTurbulenceTypeAttribute) Value() SVGTurbulenceType {
	var v SVGTurbulenceType // out
	v = SVGTurbulenceType(s.native.value)
	return v
}

// SVGVectorAttribute: instance of this type is always passed by reference.
type SVGVectorAttribute struct {
	*svgVectorAttribute
}

// svgVectorAttribute is the struct that's finalized.
type svgVectorAttribute struct {
	native *C.LsmSvgVectorAttribute
}

func (s *SVGVectorAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGVectorAttribute) Value() *SVGVector {
	var v *SVGVector // out
	v = (*SVGVector)(gextras.NewStructNative(unsafe.Pointer((&s.native.value))))
	return v
}

// SVGViewboxAttribute: instance of this type is always passed by reference.
type SVGViewboxAttribute struct {
	*svgViewboxAttribute
}

// svgViewboxAttribute is the struct that's finalized.
type svgViewboxAttribute struct {
	native *C.LsmSvgViewboxAttribute
}

func (s *SVGViewboxAttribute) Base() *Attribute {
	var v *Attribute // out
	v = (*Attribute)(gextras.NewStructNative(unsafe.Pointer((&s.native.base))))
	return v
}

func (s *SVGViewboxAttribute) Value() *Box {
	var v *Box // out
	v = (*Box)(gextras.NewStructNative(unsafe.Pointer((&s.native.value))))
	return v
}

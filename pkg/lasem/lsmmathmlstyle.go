// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// glib.Type values for lsmmathmlstyle.go.
var GTypeMathMLStyle = externglib.Type(C.lsm_mathml_style_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeMathMLStyle, F: marshalMathMLStyle},
	})
}

// MathMLStyle: instance of this type is always passed by reference.
type MathMLStyle struct {
	*mathMLStyle
}

// mathMLStyle is the struct that's finalized.
type mathMLStyle struct {
	native *C.LsmMathmlStyle
}

func marshalMathMLStyle(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &MathMLStyle{&mathMLStyle{(*C.LsmMathmlStyle)(b)}}, nil
}

// NewMathMLStyle constructs a struct MathMLStyle.
func NewMathMLStyle() *MathMLStyle {
	var _cret *C.LsmMathmlStyle // in

	_cret = C.lsm_mathml_style_new()

	var _mathmlStyle *MathMLStyle // out

	_mathmlStyle = (*MathMLStyle)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_mathmlStyle)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.lsm_mathml_style_free((*C.LsmMathmlStyle)(intern.C))
		},
	)

	return _mathmlStyle
}

func (m *MathMLStyle) Display() MathMLDisplay {
	var v MathMLDisplay // out
	v = MathMLDisplay(m.native.display)
	return v
}

func (m *MathMLStyle) ScriptLevel() int {
	var v int // out
	v = int(m.native.script_level)
	return v
}

func (m *MathMLStyle) ScriptSizeMultiplier() float64 {
	var v float64 // out
	v = float64(m.native.script_size_multiplier)
	return v
}

func (m *MathMLStyle) ScriptMinSize() float64 {
	var v float64 // out
	v = float64(m.native.script_min_size)
	return v
}

func (m *MathMLStyle) NegativeVeryVeryThinMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.negative_very_very_thin_math_space)
	return v
}

func (m *MathMLStyle) NegativeVeryThinMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.negative_very_thin_math_space)
	return v
}

func (m *MathMLStyle) NegativeThinMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.negative_thin_math_space)
	return v
}

func (m *MathMLStyle) NegativeMediumMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.negative_medium_math_space)
	return v
}

func (m *MathMLStyle) NegativeThickMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.negative_thick_math_space)
	return v
}

func (m *MathMLStyle) NegativeVeryThickMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.negative_very_thick_math_space)
	return v
}

func (m *MathMLStyle) NegativeVeryVeryThickMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.negative_very_very_thick_math_space)
	return v
}

func (m *MathMLStyle) VeryVeryThinMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.very_very_thin_math_space)
	return v
}

func (m *MathMLStyle) VeryThinMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.very_thin_math_space)
	return v
}

func (m *MathMLStyle) ThinMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.thin_math_space)
	return v
}

func (m *MathMLStyle) MediumMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.medium_math_space)
	return v
}

func (m *MathMLStyle) ThickMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.thick_math_space)
	return v
}

func (m *MathMLStyle) VeryThickMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.very_thick_math_space)
	return v
}

func (m *MathMLStyle) VeryVeryThickMathSpace() float64 {
	var v float64 // out
	v = float64(m.native.very_very_thick_math_space)
	return v
}

func (m *MathMLStyle) MathFamily() string {
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(m.native.math_family)))
	return v
}

func (m *MathMLStyle) MathVariant() MathMLVariant {
	var v MathMLVariant // out
	v = MathMLVariant(m.native.math_variant)
	return v
}

func (m *MathMLStyle) MathSize() float64 {
	var v float64 // out
	v = float64(m.native.math_size)
	return v
}

func (m *MathMLStyle) MathColor() *MathMLColor {
	var v *MathMLColor // out
	v = (*MathMLColor)(gextras.NewStructNative(unsafe.Pointer((&m.native.math_color))))
	return v
}

func (m *MathMLStyle) MathBackground() *MathMLColor {
	var v *MathMLColor // out
	v = (*MathMLColor)(gextras.NewStructNative(unsafe.Pointer((&m.native.math_background))))
	return v
}

func (m *MathMLStyle) Bevelled() bool {
	var v bool // out
	if m.native.bevelled != 0 {
		v = true
	}
	return v
}

func (m *MathMLStyle) SubscriptShift() float64 {
	var v float64 // out
	v = float64(m.native.subscript_shift)
	return v
}

func (m *MathMLStyle) SuperscriptShift() float64 {
	var v float64 // out
	v = float64(m.native.superscript_shift)
	return v
}

func (m *MathMLStyle) LineThickness() float64 {
	var v float64 // out
	v = float64(m.native.line_thickness)
	return v
}

// The function takes the following parameters:
//
func (style *MathMLStyle) ChangeScriptLevel(increment int) {
	var _arg0 *C.LsmMathmlStyle // out
	var _arg1 C.int             // out

	_arg0 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(style)))
	_arg1 = C.int(increment)

	C.lsm_mathml_style_change_script_level(_arg0, _arg1)
	runtime.KeepAlive(style)
	runtime.KeepAlive(increment)
}

// The function returns the following values:
//
func (from *MathMLStyle) Duplicate() *MathMLStyle {
	var _arg0 *C.LsmMathmlStyle // out
	var _cret *C.LsmMathmlStyle // in

	_arg0 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(from)))

	_cret = C.lsm_mathml_style_duplicate(_arg0)
	runtime.KeepAlive(from)

	var _mathmlStyle *MathMLStyle // out

	_mathmlStyle = (*MathMLStyle)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_mathmlStyle)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.lsm_mathml_style_free((*C.LsmMathmlStyle)(intern.C))
		},
	)

	return _mathmlStyle
}

// The function takes the following parameters:
//
//    - red
//    - green
//    - blue
//    - alpha
//
func (style *MathMLStyle) SetMathColor(red float64, green float64, blue float64, alpha float64) {
	var _arg0 *C.LsmMathmlStyle // out
	var _arg1 C.double          // out
	var _arg2 C.double          // out
	var _arg3 C.double          // out
	var _arg4 C.double          // out

	_arg0 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(style)))
	_arg1 = C.double(red)
	_arg2 = C.double(green)
	_arg3 = C.double(blue)
	_arg4 = C.double(alpha)

	C.lsm_mathml_style_set_math_color(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(style)
	runtime.KeepAlive(red)
	runtime.KeepAlive(green)
	runtime.KeepAlive(blue)
	runtime.KeepAlive(alpha)
}

// The function takes the following parameters:
//
func (style *MathMLStyle) SetMathFamily(mathFamily string) {
	var _arg0 *C.LsmMathmlStyle // out
	var _arg1 *C.char           // out

	_arg0 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(style)))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(mathFamily)))
	defer C.free(unsafe.Pointer(_arg1))

	C.lsm_mathml_style_set_math_family(_arg0, _arg1)
	runtime.KeepAlive(style)
	runtime.KeepAlive(mathFamily)
}

// The function takes the following parameters:
//
func (style *MathMLStyle) SetMathSizePt(mathSize float64) {
	var _arg0 *C.LsmMathmlStyle // out
	var _arg1 C.double          // out

	_arg0 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(style)))
	_arg1 = C.double(mathSize)

	C.lsm_mathml_style_set_math_size_pt(_arg0, _arg1)
	runtime.KeepAlive(style)
	runtime.KeepAlive(mathSize)
}

// The function takes the following parameters:
//
func (style *MathMLStyle) SetMathVariant(mathVariant MathMLVariant) {
	var _arg0 *C.LsmMathmlStyle  // out
	var _arg1 C.LsmMathmlVariant // out

	_arg0 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(style)))
	_arg1 = C.LsmMathmlVariant(mathVariant)

	C.lsm_mathml_style_set_math_variant(_arg0, _arg1)
	runtime.KeepAlive(style)
	runtime.KeepAlive(mathVariant)
}

// The function takes the following parameters:
//
func (style *MathMLStyle) SetScriptMinSizePt(scriptMinSize float64) {
	var _arg0 *C.LsmMathmlStyle // out
	var _arg1 C.double          // out

	_arg0 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(style)))
	_arg1 = C.double(scriptMinSize)

	C.lsm_mathml_style_set_script_min_size_pt(_arg0, _arg1)
	runtime.KeepAlive(style)
	runtime.KeepAlive(scriptMinSize)
}

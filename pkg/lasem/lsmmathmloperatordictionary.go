// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// The function takes the following parameters:
//
//    - utf8
//    - form
//
// The function returns the following values:
//
func MathMLOperatorDictionaryLookup(utf8 string, form MathMLForm) *MathMLOperatorDictionaryEntry {
	var _arg1 *C.char                             // out
	var _arg2 C.LsmMathmlForm                     // out
	var _cret *C.LsmMathmlOperatorDictionaryEntry // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(utf8)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.LsmMathmlForm(form)

	_cret = C.lsm_mathml_operator_dictionary_lookup(_arg1, _arg2)
	runtime.KeepAlive(utf8)
	runtime.KeepAlive(form)

	var _mathmlOperatorDictionaryEntry *MathMLOperatorDictionaryEntry // out

	_mathmlOperatorDictionaryEntry = (*MathMLOperatorDictionaryEntry)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _mathmlOperatorDictionaryEntry
}

// MathMLOperatorDictionaryEntry: instance of this type is always passed by
// reference.
type MathMLOperatorDictionaryEntry struct {
	*mathMLOperatorDictionaryEntry
}

// mathMLOperatorDictionaryEntry is the struct that's finalized.
type mathMLOperatorDictionaryEntry struct {
	native *C.LsmMathmlOperatorDictionaryEntry
}

func (m *MathMLOperatorDictionaryEntry) Name() string {
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(m.native.name)))
	return v
}

func (m *MathMLOperatorDictionaryEntry) Form() MathMLForm {
	var v MathMLForm // out
	v = MathMLForm(m.native.form)
	return v
}

func (m *MathMLOperatorDictionaryEntry) LeftSpace() *MathMLSpace {
	var v *MathMLSpace // out
	v = (*MathMLSpace)(gextras.NewStructNative(unsafe.Pointer((&m.native.left_space))))
	return v
}

func (m *MathMLOperatorDictionaryEntry) RightSpace() *MathMLSpace {
	var v *MathMLSpace // out
	v = (*MathMLSpace)(gextras.NewStructNative(unsafe.Pointer((&m.native.right_space))))
	return v
}

func (m *MathMLOperatorDictionaryEntry) Stretchy() bool {
	var v bool // out
	if m.native.stretchy != 0 {
		v = true
	}
	return v
}

func (m *MathMLOperatorDictionaryEntry) Fence() bool {
	var v bool // out
	if m.native.fence != 0 {
		v = true
	}
	return v
}

func (m *MathMLOperatorDictionaryEntry) Accent() bool {
	var v bool // out
	if m.native.accent != 0 {
		v = true
	}
	return v
}

func (m *MathMLOperatorDictionaryEntry) LargeOp() bool {
	var v bool // out
	if m.native.large_op != 0 {
		v = true
	}
	return v
}

func (m *MathMLOperatorDictionaryEntry) MovableLimits() bool {
	var v bool // out
	if m.native.movable_limits != 0 {
		v = true
	}
	return v
}

func (m *MathMLOperatorDictionaryEntry) Separator() bool {
	var v bool // out
	if m.native.separator != 0 {
		v = true
	}
	return v
}

func (m *MathMLOperatorDictionaryEntry) MinSize() *MathMLSpace {
	var v *MathMLSpace // out
	v = (*MathMLSpace)(gextras.NewStructNative(unsafe.Pointer((&m.native.min_size))))
	return v
}

func (m *MathMLOperatorDictionaryEntry) MaxSize() *MathMLSpace {
	var v *MathMLSpace // out
	v = (*MathMLSpace)(gextras.NewStructNative(unsafe.Pointer((&m.native.max_size))))
	return v
}

func (m *MathMLOperatorDictionaryEntry) Symmetric() bool {
	var v bool // out
	if m.native.symmetric != 0 {
		v = true
	}
	return v
}

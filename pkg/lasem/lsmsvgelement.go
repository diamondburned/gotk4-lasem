// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
// extern void _gotk4_lasem0_SvgElementClass_enable_rendering(LsmSvgElement*);
// extern void _gotk4_lasem0_SvgElementClass_get_extents(LsmSvgElement*, LsmSvgView*, LsmExtents*);
// extern void _gotk4_lasem0_SvgElementClass_render(LsmSvgElement*, LsmSvgView*);
// extern void _gotk4_lasem0_SvgElementClass_transformed_get_extents(LsmSvgElement*, LsmSvgView*, LsmExtents*);
// extern void _gotk4_lasem0_SvgElementClass_transformed_render(LsmSvgElement*, LsmSvgView*);
import "C"

// glib.Type values for lsmsvgelement.go.
var GTypeSVGElement = externglib.Type(C.lsm_svg_element_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeSVGElement, F: marshalSVGElement},
	})
}

// SVGElementOverrider contains methods that are overridable.
type SVGElementOverrider interface {
	EnableRendering()
	// The function takes the following parameters:
	//
	//    - view
	//    - extents
	//
	Extents(view *SVGView, extents *Extents)
	// The function takes the following parameters:
	//
	Render(view *SVGView)
	// The function takes the following parameters:
	//
	//    - view
	//    - extents
	//
	TransformedGetExtents(view *SVGView, extents *Extents)
	// The function takes the following parameters:
	//
	TransformedRender(view *SVGView)
}

type SVGElement struct {
	_ [0]func() // equal guard
	DOMElement
}

var (
	_ DOMElementer = (*SVGElement)(nil)
)

// SVGElementer describes types inherited from class SVGElement.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type SVGElementer interface {
	externglib.Objector
	baseSVGElement() *SVGElement
}

var _ SVGElementer = (*SVGElement)(nil)

func classInitSVGElementer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

	goval := gbox.Get(uintptr(data))
	pclass := (*C.LsmSvgElementClass)(unsafe.Pointer(gclassPtr))
	// gclass := (*C.GTypeClass)(unsafe.Pointer(gclassPtr))
	// pclass := (*C.LsmSvgElementClass)(unsafe.Pointer(C.g_type_class_peek_parent(gclass)))

	if _, ok := goval.(interface{ EnableRendering() }); ok {
		pclass.enable_rendering = (*[0]byte)(C._gotk4_lasem0_SvgElementClass_enable_rendering)
	}

	if _, ok := goval.(interface {
		Extents(view *SVGView, extents *Extents)
	}); ok {
		pclass.get_extents = (*[0]byte)(C._gotk4_lasem0_SvgElementClass_get_extents)
	}

	if _, ok := goval.(interface{ Render(view *SVGView) }); ok {
		pclass.render = (*[0]byte)(C._gotk4_lasem0_SvgElementClass_render)
	}

	if _, ok := goval.(interface {
		TransformedGetExtents(view *SVGView, extents *Extents)
	}); ok {
		pclass.transformed_get_extents = (*[0]byte)(C._gotk4_lasem0_SvgElementClass_transformed_get_extents)
	}

	if _, ok := goval.(interface{ TransformedRender(view *SVGView) }); ok {
		pclass.transformed_render = (*[0]byte)(C._gotk4_lasem0_SvgElementClass_transformed_render)
	}
}

//export _gotk4_lasem0_SvgElementClass_enable_rendering
func _gotk4_lasem0_SvgElementClass_enable_rendering(arg0 *C.LsmSvgElement) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ EnableRendering() })

	iface.EnableRendering()
}

//export _gotk4_lasem0_SvgElementClass_get_extents
func _gotk4_lasem0_SvgElementClass_get_extents(arg0 *C.LsmSvgElement, arg1 *C.LsmSvgView, arg2 *C.LsmExtents) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		Extents(view *SVGView, extents *Extents)
	})

	var _view *SVGView    // out
	var _extents *Extents // out

	_view = wrapSVGView(externglib.Take(unsafe.Pointer(arg1)))
	_extents = (*Extents)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	iface.Extents(_view, _extents)
}

//export _gotk4_lasem0_SvgElementClass_render
func _gotk4_lasem0_SvgElementClass_render(arg0 *C.LsmSvgElement, arg1 *C.LsmSvgView) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ Render(view *SVGView) })

	var _view *SVGView // out

	_view = wrapSVGView(externglib.Take(unsafe.Pointer(arg1)))

	iface.Render(_view)
}

//export _gotk4_lasem0_SvgElementClass_transformed_get_extents
func _gotk4_lasem0_SvgElementClass_transformed_get_extents(arg0 *C.LsmSvgElement, arg1 *C.LsmSvgView, arg2 *C.LsmExtents) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface {
		TransformedGetExtents(view *SVGView, extents *Extents)
	})

	var _view *SVGView    // out
	var _extents *Extents // out

	_view = wrapSVGView(externglib.Take(unsafe.Pointer(arg1)))
	_extents = (*Extents)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	iface.TransformedGetExtents(_view, _extents)
}

//export _gotk4_lasem0_SvgElementClass_transformed_render
func _gotk4_lasem0_SvgElementClass_transformed_render(arg0 *C.LsmSvgElement, arg1 *C.LsmSvgView) {
	goval := externglib.GoPrivateFromObject(unsafe.Pointer(arg0))
	iface := goval.(interface{ TransformedRender(view *SVGView) })

	var _view *SVGView // out

	_view = wrapSVGView(externglib.Take(unsafe.Pointer(arg1)))

	iface.TransformedRender(_view)
}

func wrapSVGElement(obj *externglib.Object) *SVGElement {
	return &SVGElement{
		DOMElement: DOMElement{
			DOMNode: DOMNode{
				Object: obj,
			},
		},
	}
}

func marshalSVGElement(p uintptr) (interface{}, error) {
	return wrapSVGElement(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (element *SVGElement) baseSVGElement() *SVGElement {
	return element
}

// BaseSVGElement returns the underlying base object.
func BaseSVGElement(obj SVGElementer) *SVGElement {
	return obj.baseSVGElement()
}

// The function takes the following parameters:
//
func (element *SVGElement) ForceRender(view *SVGView) {
	var _arg0 *C.LsmSvgElement // out
	var _arg1 *C.LsmSvgView    // out

	_arg0 = (*C.LsmSvgElement)(unsafe.Pointer(externglib.InternObject(element).Native()))
	_arg1 = (*C.LsmSvgView)(unsafe.Pointer(externglib.InternObject(view).Native()))

	C.lsm_svg_element_force_render(_arg0, _arg1)
	runtime.KeepAlive(element)
	runtime.KeepAlive(view)
}

// The function returns the following values:
//
func (element *SVGElement) Category() SVGElementCategory {
	var _arg0 *C.LsmSvgElement        // out
	var _cret C.LsmSvgElementCategory // in

	_arg0 = (*C.LsmSvgElement)(unsafe.Pointer(externglib.InternObject(element).Native()))

	_cret = C.lsm_svg_element_get_category(_arg0)
	runtime.KeepAlive(element)

	var _svgElementCategory SVGElementCategory // out

	_svgElementCategory = SVGElementCategory(_cret)

	return _svgElementCategory
}

// The function takes the following parameters:
//
//    - view
//    - extents
//
func (element *SVGElement) Extents(view *SVGView, extents *Extents) {
	var _arg0 *C.LsmSvgElement // out
	var _arg1 *C.LsmSvgView    // out
	var _arg2 *C.LsmExtents    // out

	_arg0 = (*C.LsmSvgElement)(unsafe.Pointer(externglib.InternObject(element).Native()))
	_arg1 = (*C.LsmSvgView)(unsafe.Pointer(externglib.InternObject(view).Native()))
	_arg2 = (*C.LsmExtents)(gextras.StructNative(unsafe.Pointer(extents)))

	C.lsm_svg_element_get_extents(_arg0, _arg1, _arg2)
	runtime.KeepAlive(element)
	runtime.KeepAlive(view)
	runtime.KeepAlive(extents)
}

// The function takes the following parameters:
//
func (element *SVGElement) Render(view *SVGView) {
	var _arg0 *C.LsmSvgElement // out
	var _arg1 *C.LsmSvgView    // out

	_arg0 = (*C.LsmSvgElement)(unsafe.Pointer(externglib.InternObject(element).Native()))
	_arg1 = (*C.LsmSvgView)(unsafe.Pointer(externglib.InternObject(view).Native()))

	C.lsm_svg_element_render(_arg0, _arg1)
	runtime.KeepAlive(element)
	runtime.KeepAlive(view)
}

// The function takes the following parameters:
//
//    - view
//    - extents
//
func (element *SVGElement) TransformedGetExtents(view *SVGView, extents *Extents) {
	var _arg0 *C.LsmSvgElement // out
	var _arg1 *C.LsmSvgView    // out
	var _arg2 *C.LsmExtents    // out

	_arg0 = (*C.LsmSvgElement)(unsafe.Pointer(externglib.InternObject(element).Native()))
	_arg1 = (*C.LsmSvgView)(unsafe.Pointer(externglib.InternObject(view).Native()))
	_arg2 = (*C.LsmExtents)(gextras.StructNative(unsafe.Pointer(extents)))

	C.lsm_svg_element_transformed_get_extents(_arg0, _arg1, _arg2)
	runtime.KeepAlive(element)
	runtime.KeepAlive(view)
	runtime.KeepAlive(extents)
}

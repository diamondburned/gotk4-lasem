// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLColumnAlignFromString(str string) MathMLColumnAlign {
	var _arg1 *C.char                // out
	var _cret C.LsmMathmlColumnAlign // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_column_align_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlColumnAlign MathMLColumnAlign // out

	_mathmlColumnAlign = MathMLColumnAlign(_cret)

	return _mathmlColumnAlign
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLColumnAlignToString(columnAlign MathMLColumnAlign) string {
	var _arg1 C.LsmMathmlColumnAlign // out
	var _cret *C.char                // in

	_arg1 = C.LsmMathmlColumnAlign(columnAlign)

	_cret = C.lsm_mathml_column_align_to_string(_arg1)
	runtime.KeepAlive(columnAlign)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLDisplayFromString(str string) MathMLDisplay {
	var _arg1 *C.char            // out
	var _cret C.LsmMathmlDisplay // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_display_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlDisplay MathMLDisplay // out

	_mathmlDisplay = MathMLDisplay(_cret)

	return _mathmlDisplay
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLDisplayToString(display MathMLDisplay) string {
	var _arg1 C.LsmMathmlDisplay // out
	var _cret *C.char            // in

	_arg1 = C.LsmMathmlDisplay(display)

	_cret = C.lsm_mathml_display_to_string(_arg1)
	runtime.KeepAlive(display)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLFontStyleFromString(str string) MathMLFontStyle {
	var _arg1 *C.char              // out
	var _cret C.LsmMathmlFontStyle // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_font_style_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlFontStyle MathMLFontStyle // out

	_mathmlFontStyle = MathMLFontStyle(_cret)

	return _mathmlFontStyle
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLFontStyleToString(fontStyle MathMLFontStyle) string {
	var _arg1 C.LsmMathmlFontStyle // out
	var _cret *C.char              // in

	_arg1 = C.LsmMathmlFontStyle(fontStyle)

	_cret = C.lsm_mathml_font_style_to_string(_arg1)
	runtime.KeepAlive(fontStyle)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLFontWeightFromString(str string) MathMLFontWeight {
	var _arg1 *C.char               // out
	var _cret C.LsmMathmlFontWeight // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_font_weight_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlFontWeight MathMLFontWeight // out

	_mathmlFontWeight = MathMLFontWeight(_cret)

	return _mathmlFontWeight
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLFontWeightToString(fontWeight MathMLFontWeight) string {
	var _arg1 C.LsmMathmlFontWeight // out
	var _cret *C.char               // in

	_arg1 = C.LsmMathmlFontWeight(fontWeight)

	_cret = C.lsm_mathml_font_weight_to_string(_arg1)
	runtime.KeepAlive(fontWeight)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLFormFromString(str string) MathMLForm {
	var _arg1 *C.char         // out
	var _cret C.LsmMathmlForm // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_form_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlForm MathMLForm // out

	_mathmlForm = MathMLForm(_cret)

	return _mathmlForm
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLFormToString(form MathMLForm) string {
	var _arg1 C.LsmMathmlForm // out
	var _cret *C.char         // in

	_arg1 = C.LsmMathmlForm(form)

	_cret = C.lsm_mathml_form_to_string(_arg1)
	runtime.KeepAlive(form)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLLineFromString(str string) MathMLLine {
	var _arg1 *C.char         // out
	var _cret C.LsmMathmlLine // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_line_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlLine MathMLLine // out

	_mathmlLine = MathMLLine(_cret)

	return _mathmlLine
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLLineToString(line MathMLLine) string {
	var _arg1 C.LsmMathmlLine // out
	var _cret *C.char         // in

	_arg1 = C.LsmMathmlLine(line)

	_cret = C.lsm_mathml_line_to_string(_arg1)
	runtime.KeepAlive(line)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLLinebreakFromString(str string) MathMLLinebreak {
	var _arg1 *C.char              // out
	var _cret C.LsmMathmlLinebreak // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_linebreak_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlLinebreak MathMLLinebreak // out

	_mathmlLinebreak = MathMLLinebreak(_cret)

	return _mathmlLinebreak
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLLinebreakToString(linebreak MathMLLinebreak) string {
	var _arg1 C.LsmMathmlLinebreak // out
	var _cret *C.char              // in

	_arg1 = C.LsmMathmlLinebreak(linebreak)

	_cret = C.lsm_mathml_linebreak_to_string(_arg1)
	runtime.KeepAlive(linebreak)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLModeFromString(str string) MathMLMode {
	var _arg1 *C.char         // out
	var _cret C.LsmMathmlMode // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_mode_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlMode MathMLMode // out

	_mathmlMode = MathMLMode(_cret)

	return _mathmlMode
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLModeToString(mode MathMLMode) string {
	var _arg1 C.LsmMathmlMode // out
	var _cret *C.char         // in

	_arg1 = C.LsmMathmlMode(mode)

	_cret = C.lsm_mathml_mode_to_string(_arg1)
	runtime.KeepAlive(mode)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLNotationFromString(str string) MathMLNotation {
	var _arg1 *C.char             // out
	var _cret C.LsmMathmlNotation // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_notation_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlNotation MathMLNotation // out

	_mathmlNotation = MathMLNotation(_cret)

	return _mathmlNotation
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLNotationToString(notation MathMLNotation) string {
	var _arg1 C.LsmMathmlNotation // out
	var _cret *C.char             // in

	_arg1 = C.LsmMathmlNotation(notation)

	_cret = C.lsm_mathml_notation_to_string(_arg1)
	runtime.KeepAlive(notation)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLRowAlignFromString(str string) MathMLRowAlign {
	var _arg1 *C.char             // out
	var _cret C.LsmMathmlRowAlign // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_row_align_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlRowAlign MathMLRowAlign // out

	_mathmlRowAlign = MathMLRowAlign(_cret)

	return _mathmlRowAlign
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLRowAlignToString(rowAlign MathMLRowAlign) string {
	var _arg1 C.LsmMathmlRowAlign // out
	var _cret *C.char             // in

	_arg1 = C.LsmMathmlRowAlign(rowAlign)

	_cret = C.lsm_mathml_row_align_to_string(_arg1)
	runtime.KeepAlive(rowAlign)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLSpaceNameFromString(str string) MathMLSpaceName {
	var _arg1 *C.char              // out
	var _cret C.LsmMathmlSpaceName // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_space_name_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlSpaceName MathMLSpaceName // out

	_mathmlSpaceName = MathMLSpaceName(_cret)

	return _mathmlSpaceName
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLSpaceNameToString(name MathMLSpaceName) string {
	var _arg1 C.LsmMathmlSpaceName // out
	var _cret *C.char              // in

	_arg1 = C.LsmMathmlSpaceName(name)

	_cret = C.lsm_mathml_space_name_to_string(_arg1)
	runtime.KeepAlive(name)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLUnitFromString(str string) MathMLUnit {
	var _arg1 *C.char         // out
	var _cret C.LsmMathmlUnit // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_unit_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlUnit MathMLUnit // out

	_mathmlUnit = MathMLUnit(_cret)

	return _mathmlUnit
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLUnitToString(unit MathMLUnit) string {
	var _arg1 C.LsmMathmlUnit // out
	var _cret *C.char         // in

	_arg1 = C.LsmMathmlUnit(unit)

	_cret = C.lsm_mathml_unit_to_string(_arg1)
	runtime.KeepAlive(unit)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLVariantFromString(str string) MathMLVariant {
	var _arg1 *C.char            // out
	var _cret C.LsmMathmlVariant // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_variant_from_string(_arg1)
	runtime.KeepAlive(str)

	var _mathmlVariant MathMLVariant // out

	_mathmlVariant = MathMLVariant(_cret)

	return _mathmlVariant
}

// The function takes the following parameters:
//
//    - variant
//    - style
//
func MathMLVariantSetFontStyle(variant *MathMLVariant, style MathMLFontStyle) {
	var _arg1 *C.LsmMathmlVariant  // out
	var _arg2 C.LsmMathmlFontStyle // out

	_arg1 = (*C.LsmMathmlVariant)(unsafe.Pointer(variant))
	_arg2 = C.LsmMathmlFontStyle(style)

	C.lsm_mathml_variant_set_font_style(_arg1, _arg2)
	runtime.KeepAlive(variant)
	runtime.KeepAlive(style)
}

// The function takes the following parameters:
//
//    - variant
//    - weight
//
func MathMLVariantSetFontWeight(variant *MathMLVariant, weight MathMLFontWeight) {
	var _arg1 *C.LsmMathmlVariant   // out
	var _arg2 C.LsmMathmlFontWeight // out

	_arg1 = (*C.LsmMathmlVariant)(unsafe.Pointer(variant))
	_arg2 = C.LsmMathmlFontWeight(weight)

	C.lsm_mathml_variant_set_font_weight(_arg1, _arg2)
	runtime.KeepAlive(variant)
	runtime.KeepAlive(weight)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func MathMLVariantToString(variant MathMLVariant) string {
	var _arg1 C.LsmMathmlVariant // out
	var _cret *C.char            // in

	_arg1 = C.LsmMathmlVariant(variant)

	_cret = C.lsm_mathml_variant_to_string(_arg1)
	runtime.KeepAlive(variant)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// SVGMatrix: instance of this type is always passed by reference.
type SVGMatrix struct {
	*svgMatrix
}

// svgMatrix is the struct that's finalized.
type svgMatrix struct {
	native *C.LsmSvgMatrix
}

func (s *SVGMatrix) A() float64 {
	var v float64 // out
	v = float64(s.native.a)
	return v
}

func (s *SVGMatrix) B() float64 {
	var v float64 // out
	v = float64(s.native.b)
	return v
}

func (s *SVGMatrix) C() float64 {
	var v float64 // out
	v = float64(s.native.c)
	return v
}

func (s *SVGMatrix) D() float64 {
	var v float64 // out
	v = float64(s.native.d)
	return v
}

func (s *SVGMatrix) E() float64 {
	var v float64 // out
	v = float64(s.native.e)
	return v
}

func (s *SVGMatrix) F() float64 {
	var v float64 // out
	v = float64(s.native.f)
	return v
}

func (s *SVGMatrix) Flags() SVGMatrixFlags {
	var v SVGMatrixFlags // out
	v = SVGMatrixFlags(s.native.flags)
	return v
}

// The function takes the following parameters:
//
//    - a
//    - b
//    - c
//    - d
//    - e
//    - f
//
func (matrix *SVGMatrix) Init(a float64, b float64, c float64, d float64, e float64, f float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out
	var _arg2 C.double        // out
	var _arg3 C.double        // out
	var _arg4 C.double        // out
	var _arg5 C.double        // out
	var _arg6 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(a)
	_arg2 = C.double(b)
	_arg3 = C.double(c)
	_arg4 = C.double(d)
	_arg5 = C.double(e)
	_arg6 = C.double(f)

	C.lsm_svg_matrix_init(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)
	runtime.KeepAlive(c)
	runtime.KeepAlive(d)
	runtime.KeepAlive(e)
	runtime.KeepAlive(f)
}

func (matrix *SVGMatrix) InitIdentity() {
	var _arg0 *C.LsmSvgMatrix // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))

	C.lsm_svg_matrix_init_identity(_arg0)
	runtime.KeepAlive(matrix)
}

// The function takes the following parameters:
//
func (matrix *SVGMatrix) InitRotate(radians float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(radians)

	C.lsm_svg_matrix_init_rotate(_arg0, _arg1)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(radians)
}

// The function takes the following parameters:
//
//    - sx
//    - sy
//
func (matrix *SVGMatrix) InitScale(sx float64, sy float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out
	var _arg2 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(sx)
	_arg2 = C.double(sy)

	C.lsm_svg_matrix_init_scale(_arg0, _arg1, _arg2)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(sx)
	runtime.KeepAlive(sy)
}

// The function takes the following parameters:
//
func (matrix *SVGMatrix) InitSkewX(radians float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(radians)

	C.lsm_svg_matrix_init_skew_x(_arg0, _arg1)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(radians)
}

// The function takes the following parameters:
//
func (matrix *SVGMatrix) InitSkewY(radians float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(radians)

	C.lsm_svg_matrix_init_skew_y(_arg0, _arg1)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(radians)
}

// The function takes the following parameters:
//
//    - tx
//    - ty
//
func (matrix *SVGMatrix) InitTranslate(tx float64, ty float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out
	var _arg2 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(tx)
	_arg2 = C.double(ty)

	C.lsm_svg_matrix_init_translate(_arg0, _arg1, _arg2)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(tx)
	runtime.KeepAlive(ty)
}

// The function returns the following values:
//
func (matrix *SVGMatrix) IsIdentity() bool {
	var _arg0 *C.LsmSvgMatrix // out
	var _cret C.gboolean      // in

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))

	_cret = C.lsm_svg_matrix_is_identity(_arg0)
	runtime.KeepAlive(matrix)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
func (matrix *SVGMatrix) IsInvertible() bool {
	var _arg0 *C.LsmSvgMatrix // out
	var _cret C.gboolean      // in

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))

	_cret = C.lsm_svg_matrix_is_invertible(_arg0)
	runtime.KeepAlive(matrix)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - a
//    - b
//
func (result *SVGMatrix) Multiply(a *SVGMatrix, b *SVGMatrix) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 *C.LsmSvgMatrix // out
	var _arg2 *C.LsmSvgMatrix // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(result)))
	_arg1 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(a)))
	_arg2 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(b)))

	C.lsm_svg_matrix_multiply(_arg0, _arg1, _arg2)
	runtime.KeepAlive(result)
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)
}

// The function takes the following parameters:
//
func (matrix *SVGMatrix) Rotate(radians float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(radians)

	C.lsm_svg_matrix_rotate(_arg0, _arg1)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(radians)
}

// The function takes the following parameters:
//
//    - sx
//    - sy
//
func (matrix *SVGMatrix) Scale(sx float64, sy float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out
	var _arg2 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(sx)
	_arg2 = C.double(sy)

	C.lsm_svg_matrix_scale(_arg0, _arg1, _arg2)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(sx)
	runtime.KeepAlive(sy)
}

// The function takes the following parameters:
//
func (matrix *SVGMatrix) SkewX(radians float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(radians)

	C.lsm_svg_matrix_skew_x(_arg0, _arg1)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(radians)
}

// The function takes the following parameters:
//
func (matrix *SVGMatrix) SkewY(radians float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(radians)

	C.lsm_svg_matrix_skew_y(_arg0, _arg1)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(radians)
}

// The function takes the following parameters:
//
//    - x1
//    - y1
//    - x2
//    - y2
//
func (matrix *SVGMatrix) TransformBoundingBox(x1 *float64, y1 *float64, x2 *float64, y2 *float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 *C.double       // out
	var _arg2 *C.double       // out
	var _arg3 *C.double       // out
	var _arg4 *C.double       // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = (*C.double)(unsafe.Pointer(x1))
	_arg2 = (*C.double)(unsafe.Pointer(y1))
	_arg3 = (*C.double)(unsafe.Pointer(x2))
	_arg4 = (*C.double)(unsafe.Pointer(y2))

	C.lsm_svg_matrix_transform_bounding_box(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(x1)
	runtime.KeepAlive(y1)
	runtime.KeepAlive(x2)
	runtime.KeepAlive(y2)
}

// The function takes the following parameters:
//
//    - x
//    - y
//
func (matrix *SVGMatrix) TransformPoint(x *float64, y *float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 *C.double       // out
	var _arg2 *C.double       // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = (*C.double)(unsafe.Pointer(x))
	_arg2 = (*C.double)(unsafe.Pointer(y))

	C.lsm_svg_matrix_transform_point(_arg0, _arg1, _arg2)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// The function takes the following parameters:
//
//    - tx
//    - ty
//
func (matrix *SVGMatrix) Translate(tx float64, ty float64) {
	var _arg0 *C.LsmSvgMatrix // out
	var _arg1 C.double        // out
	var _arg2 C.double        // out

	_arg0 = (*C.LsmSvgMatrix)(gextras.StructNative(unsafe.Pointer(matrix)))
	_arg1 = C.double(tx)
	_arg2 = C.double(ty)

	C.lsm_svg_matrix_translate(_arg0, _arg1, _arg2)
	runtime.KeepAlive(matrix)
	runtime.KeepAlive(tx)
	runtime.KeepAlive(ty)
}

// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
import "C"

// glib.Type values for lsmproperties.go.
var GTypePropertyManager = externglib.Type(C.lsm_property_manager_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypePropertyManager, F: marshalPropertyManager},
	})
}

// Property: instance of this type is always passed by reference.
type Property struct {
	*property
}

// property is the struct that's finalized.
type property struct {
	native *C.LsmProperty
}

func (p *Property) ID() uint16 {
	var v uint16 // out
	v = uint16(p.native.id)
	return v
}

func (p *Property) Flags() uint16 {
	var v uint16 // out
	v = uint16(p.native.flags)
	return v
}

func (p *Property) Value() string {
	var v string // out
	v = C.GoString((*C.gchar)(unsafe.Pointer(p.native.value)))
	return v
}

// PropertyBag: instance of this type is always passed by reference.
type PropertyBag struct {
	*propertyBag
}

// propertyBag is the struct that's finalized.
type propertyBag struct {
	native *C.LsmPropertyBag
}

func (bag *PropertyBag) Init() {
	var _arg0 *C.LsmPropertyBag // out

	_arg0 = (*C.LsmPropertyBag)(gextras.StructNative(unsafe.Pointer(bag)))

	C.lsm_property_bag_init(_arg0)
	runtime.KeepAlive(bag)
}

// PropertyInfos: instance of this type is always passed by reference.
type PropertyInfos struct {
	*propertyInfos
}

// propertyInfos is the struct that's finalized.
type propertyInfos struct {
	native *C.LsmPropertyInfos
}

// PropertyManager: instance of this type is always passed by reference.
type PropertyManager struct {
	*propertyManager
}

// propertyManager is the struct that's finalized.
type propertyManager struct {
	native *C.LsmPropertyManager
}

func marshalPropertyManager(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &PropertyManager{&propertyManager{(*C.LsmPropertyManager)(b)}}, nil
}

// NewPropertyManager constructs a struct PropertyManager.
func NewPropertyManager(nProperties uint, propertyInfos *PropertyInfos) *PropertyManager {
	var _arg1 C.uint                // out
	var _arg2 *C.LsmPropertyInfos   // out
	var _cret *C.LsmPropertyManager // in

	_arg1 = C.uint(nProperties)
	_arg2 = (*C.LsmPropertyInfos)(gextras.StructNative(unsafe.Pointer(propertyInfos)))

	_cret = C.lsm_property_manager_new(_arg1, _arg2)
	runtime.KeepAlive(nProperties)
	runtime.KeepAlive(propertyInfos)

	var _propertyManager *PropertyManager // out

	_propertyManager = (*PropertyManager)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_propertyManager)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.lsm_property_manager_unref((*C.LsmPropertyManager)(intern.C))
		},
	)

	return _propertyManager
}

// The function takes the following parameters:
//
func (manager *PropertyManager) CleanProperties(propertyBag *PropertyBag) {
	var _arg0 *C.LsmPropertyManager // out
	var _arg1 *C.LsmPropertyBag     // out

	_arg0 = (*C.LsmPropertyManager)(gextras.StructNative(unsafe.Pointer(manager)))
	_arg1 = (*C.LsmPropertyBag)(gextras.StructNative(unsafe.Pointer(propertyBag)))

	C.lsm_property_manager_clean_properties(_arg0, _arg1)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(propertyBag)
}

// The function takes the following parameters:
//
//    - propertyBag
//    - name
//
// The function returns the following values:
//
func (manager *PropertyManager) Property(propertyBag *PropertyBag, name string) string {
	var _arg0 *C.LsmPropertyManager // out
	var _arg1 *C.LsmPropertyBag     // out
	var _arg2 *C.char               // out
	var _cret *C.char               // in

	_arg0 = (*C.LsmPropertyManager)(gextras.StructNative(unsafe.Pointer(manager)))
	_arg1 = (*C.LsmPropertyBag)(gextras.StructNative(unsafe.Pointer(propertyBag)))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.lsm_property_manager_get_property(_arg0, _arg1, _arg2)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(propertyBag)
	runtime.KeepAlive(name)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (propertyManager *PropertyManager) Serialize(propertyBag *PropertyBag) string {
	var _arg0 *C.LsmPropertyManager // out
	var _arg1 *C.LsmPropertyBag     // out
	var _cret *C.char               // in

	_arg0 = (*C.LsmPropertyManager)(gextras.StructNative(unsafe.Pointer(propertyManager)))
	_arg1 = (*C.LsmPropertyBag)(gextras.StructNative(unsafe.Pointer(propertyBag)))

	_cret = C.lsm_property_manager_serialize(_arg0, _arg1)
	runtime.KeepAlive(propertyManager)
	runtime.KeepAlive(propertyBag)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// The function takes the following parameters:
//
//    - propertyBag
//    - name
//    - value
//
// The function returns the following values:
//
func (manager *PropertyManager) SetProperty(propertyBag *PropertyBag, name string, value string) bool {
	var _arg0 *C.LsmPropertyManager // out
	var _arg1 *C.LsmPropertyBag     // out
	var _arg2 *C.char               // out
	var _arg3 *C.char               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.LsmPropertyManager)(gextras.StructNative(unsafe.Pointer(manager)))
	_arg1 = (*C.LsmPropertyBag)(gextras.StructNative(unsafe.Pointer(propertyBag)))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.char)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.lsm_property_manager_set_property(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(propertyBag)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// MathMLBooleanAttribute: instance of this type is always passed by reference.
type MathMLBooleanAttribute struct {
	*mathMLBooleanAttribute
}

// mathMLBooleanAttribute is the struct that's finalized.
type mathMLBooleanAttribute struct {
	native *C.LsmMathmlBooleanAttribute
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (attribute *MathMLBooleanAttribute) Inherit(value bool) bool {
	var _arg0 *C.LsmMathmlBooleanAttribute // out
	var _arg1 C.gboolean                   // out
	var _cret C.gboolean                   // in

	_arg0 = (*C.LsmMathmlBooleanAttribute)(gextras.StructNative(unsafe.Pointer(attribute)))
	if value {
		_arg1 = C.TRUE
	}

	_cret = C.lsm_mathml_boolean_attribute_inherit(_arg0, _arg1)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MathMLColorAttribute: instance of this type is always passed by reference.
type MathMLColorAttribute struct {
	*mathMLColorAttribute
}

// mathMLColorAttribute is the struct that's finalized.
type mathMLColorAttribute struct {
	native *C.LsmMathmlColorAttribute
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (attribute *MathMLColorAttribute) Inherit(value *MathMLColor) *MathMLColor {
	var _arg0 *C.LsmMathmlColorAttribute // out
	var _arg1 C.LsmMathmlColor           // out
	var _cret C.LsmMathmlColor           // in

	_arg0 = (*C.LsmMathmlColorAttribute)(gextras.StructNative(unsafe.Pointer(attribute)))
	_arg1 = *(*C.LsmMathmlColor)(gextras.StructNative(unsafe.Pointer(value)))

	_cret = C.lsm_mathml_color_attribute_inherit(_arg0, _arg1)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)

	var _mathmlColor *MathMLColor // out

	_mathmlColor = (*MathMLColor)(gextras.NewStructNative(unsafe.Pointer((&_cret))))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_mathmlColor)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _mathmlColor
}

// MathMLDoubleAttribute: instance of this type is always passed by reference.
type MathMLDoubleAttribute struct {
	*mathMLDoubleAttribute
}

// mathMLDoubleAttribute is the struct that's finalized.
type mathMLDoubleAttribute struct {
	native *C.LsmMathmlDoubleAttribute
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (attribute *MathMLDoubleAttribute) Inherit(value float64) float64 {
	var _arg0 *C.LsmMathmlDoubleAttribute // out
	var _arg1 C.double                    // out
	var _cret C.double                    // in

	_arg0 = (*C.LsmMathmlDoubleAttribute)(gextras.StructNative(unsafe.Pointer(attribute)))
	_arg1 = C.double(value)

	_cret = C.lsm_mathml_double_attribute_inherit(_arg0, _arg1)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// MathMLEnumAttribute: instance of this type is always passed by reference.
type MathMLEnumAttribute struct {
	*mathMLEnumAttribute
}

// mathMLEnumAttribute is the struct that's finalized.
type mathMLEnumAttribute struct {
	native *C.LsmMathmlEnumAttribute
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (attribute *MathMLEnumAttribute) Inherit(value uint) uint {
	var _arg0 *C.LsmMathmlEnumAttribute // out
	var _arg1 C.uint                    // out
	var _cret C.uint                    // in

	_arg0 = (*C.LsmMathmlEnumAttribute)(gextras.StructNative(unsafe.Pointer(attribute)))
	_arg1 = C.uint(value)

	_cret = C.lsm_mathml_enum_attribute_inherit(_arg0, _arg1)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(value)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// MathMLEnumListAttribute: instance of this type is always passed by reference.
type MathMLEnumListAttribute struct {
	*mathMLEnumListAttribute
}

// mathMLEnumListAttribute is the struct that's finalized.
type mathMLEnumListAttribute struct {
	native *C.LsmMathmlEnumListAttribute
}

// MathMLLengthAttribute: instance of this type is always passed by reference.
type MathMLLengthAttribute struct {
	*mathMLLengthAttribute
}

// mathMLLengthAttribute is the struct that's finalized.
type mathMLLengthAttribute struct {
	native *C.LsmMathmlLengthAttribute
}

// The function takes the following parameters:
//
//    - base
//    - defaultValue
//    - style
//
// The function returns the following values:
//
func (attribute *MathMLLengthAttribute) Normalize(base float64, defaultValue *MathMLLength, style *MathMLStyle) float64 {
	var _arg0 *C.LsmMathmlLengthAttribute // out
	var _arg1 C.double                    // out
	var _arg2 *C.LsmMathmlLength          // out
	var _arg3 *C.LsmMathmlStyle           // out
	var _cret C.double                    // in

	_arg0 = (*C.LsmMathmlLengthAttribute)(gextras.StructNative(unsafe.Pointer(attribute)))
	_arg1 = C.double(base)
	_arg2 = (*C.LsmMathmlLength)(gextras.StructNative(unsafe.Pointer(defaultValue)))
	_arg3 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(style)))

	_cret = C.lsm_mathml_length_attribute_normalize(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(base)
	runtime.KeepAlive(defaultValue)
	runtime.KeepAlive(style)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// MathMLScriptLevelAttribute: instance of this type is always passed by
// reference.
type MathMLScriptLevelAttribute struct {
	*mathMLScriptLevelAttribute
}

// mathMLScriptLevelAttribute is the struct that's finalized.
type mathMLScriptLevelAttribute struct {
	native *C.LsmMathmlScriptLevelAttribute
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (attribute *MathMLScriptLevelAttribute) Apply(scriptLevel int) int {
	var _arg0 *C.LsmMathmlScriptLevelAttribute // out
	var _arg1 C.int                            // out
	var _cret C.int                            // in

	_arg0 = (*C.LsmMathmlScriptLevelAttribute)(gextras.StructNative(unsafe.Pointer(attribute)))
	_arg1 = C.int(scriptLevel)

	_cret = C.lsm_mathml_script_level_attribute_apply(_arg0, _arg1)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(scriptLevel)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// MathMLSpaceAttribute: instance of this type is always passed by reference.
type MathMLSpaceAttribute struct {
	*mathMLSpaceAttribute
}

// mathMLSpaceAttribute is the struct that's finalized.
type mathMLSpaceAttribute struct {
	native *C.LsmMathmlSpaceAttribute
}

// The function takes the following parameters:
//
//    - base
//    - defaultValue
//    - style
//
// The function returns the following values:
//
func (attribute *MathMLSpaceAttribute) Normalize(base float64, defaultValue *MathMLSpace, style *MathMLStyle) float64 {
	var _arg0 *C.LsmMathmlSpaceAttribute // out
	var _arg1 C.double                   // out
	var _arg2 *C.LsmMathmlSpace          // out
	var _arg3 *C.LsmMathmlStyle          // out
	var _cret C.double                   // in

	_arg0 = (*C.LsmMathmlSpaceAttribute)(gextras.StructNative(unsafe.Pointer(attribute)))
	_arg1 = C.double(base)
	_arg2 = (*C.LsmMathmlSpace)(gextras.StructNative(unsafe.Pointer(defaultValue)))
	_arg3 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(style)))

	_cret = C.lsm_mathml_space_attribute_normalize(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(base)
	runtime.KeepAlive(defaultValue)
	runtime.KeepAlive(style)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// MathMLSpaceListAttribute: instance of this type is always passed by
// reference.
type MathMLSpaceListAttribute struct {
	*mathMLSpaceListAttribute
}

// mathMLSpaceListAttribute is the struct that's finalized.
type mathMLSpaceListAttribute struct {
	native *C.LsmMathmlSpaceListAttribute
}

// The function takes the following parameters:
//
//    - base
//    - defaultValue
//    - style
//
func (attribute *MathMLSpaceListAttribute) Normalize(base float64, defaultValue *MathMLSpaceList, style *MathMLStyle) {
	var _arg0 *C.LsmMathmlSpaceListAttribute // out
	var _arg1 C.double                       // out
	var _arg2 *C.LsmMathmlSpaceList          // out
	var _arg3 *C.LsmMathmlStyle              // out

	_arg0 = (*C.LsmMathmlSpaceListAttribute)(gextras.StructNative(unsafe.Pointer(attribute)))
	_arg1 = C.double(base)
	_arg2 = (*C.LsmMathmlSpaceList)(gextras.StructNative(unsafe.Pointer(defaultValue)))
	_arg3 = (*C.LsmMathmlStyle)(gextras.StructNative(unsafe.Pointer(style)))

	C.lsm_mathml_space_list_attribute_normalize(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(base)
	runtime.KeepAlive(defaultValue)
	runtime.KeepAlive(style)
}

// MathMLStringAttribute: instance of this type is always passed by reference.
type MathMLStringAttribute struct {
	*mathMLStringAttribute
}

// mathMLStringAttribute is the struct that's finalized.
type mathMLStringAttribute struct {
	native *C.LsmMathmlStringAttribute
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (attribute *MathMLStringAttribute) Inherit(str string) string {
	var _arg0 *C.LsmMathmlStringAttribute // out
	var _arg1 *C.char                     // out
	var _cret *C.char                     // in

	_arg0 = (*C.LsmMathmlStringAttribute)(gextras.StructNative(unsafe.Pointer(attribute)))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_mathml_string_attribute_inherit(_arg0, _arg1)
	runtime.KeepAlive(attribute)
	runtime.KeepAlive(str)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// MathMLUnsignedAttribute: instance of this type is always passed by reference.
type MathMLUnsignedAttribute struct {
	*mathMLUnsignedAttribute
}

// mathMLUnsignedAttribute is the struct that's finalized.
type mathMLUnsignedAttribute struct {
	native *C.LsmMathmlUnsignedAttribute
}

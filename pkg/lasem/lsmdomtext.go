// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
import "C"

// glib.Type values for lsmdomtext.go.
var GTypeDOMText = externglib.Type(C.lsm_dom_text_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeDOMText, F: marshalDOMText},
	})
}

// DOMTextOverrider contains methods that are overridable.
type DOMTextOverrider interface {
}

type DOMText struct {
	_ [0]func() // equal guard
	DOMCharacterData
}

var (
	_ DOMCharacterDatar = (*DOMText)(nil)
)

func classInitDOMTexter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapDOMText(obj *externglib.Object) *DOMText {
	return &DOMText{
		DOMCharacterData: DOMCharacterData{
			DOMNode: DOMNode{
				Object: obj,
			},
		},
	}
}

func marshalDOMText(p uintptr) (interface{}, error) {
	return wrapDOMText(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func NewDOMText(data string) *DOMText {
	var _arg1 *C.char       // out
	var _cret *C.LsmDomNode // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.lsm_dom_text_new(_arg1)
	runtime.KeepAlive(data)

	var _domText *DOMText // out

	_domText = wrapDOMText(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domText
}

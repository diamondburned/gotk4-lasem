// Code generated by girgen. DO NOT EDIT.

package lasem

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdkpixbuf/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <lsm.h>
// #include <lsmdom.h>
// #include <lsmdomdocument.h>
// #include <lsmdomdocumentfragment.h>
// #include <lsmdomnamednodemap.h>
// #include <lsmmathmlactionelement.h>
// #include <lsmmathmlaligngroupelement.h>
// #include <lsmmathmlalignmarkelement.h>
// #include <lsmmathmlattributes.h>
// #include <lsmmathmldocument.h>
// #include <lsmmathmlelement.h>
// #include <lsmmathmlencloseelement.h>
// #include <lsmmathmlenums.h>
// #include <lsmmathmlerrorelement.h>
// #include <lsmmathmlfencedelement.h>
// #include <lsmmathmlfractionelement.h>
// #include <lsmmathmlglyphtableams.h>
// #include <lsmmathmlitexelement.h>
// #include <lsmmathmllayoututils.h>
// #include <lsmmathmlmathelement.h>
// #include <lsmmathmloperatordictionary.h>
// #include <lsmmathmloperatorelement.h>
// #include <lsmmathmlpaddedelement.h>
// #include <lsmmathmlphantomelement.h>
// #include <lsmmathmlpresentationcontainer.h>
// #include <lsmmathmlpresentationtoken.h>
// #include <lsmmathmlradicalelement.h>
// #include <lsmmathmlrowelement.h>
// #include <lsmmathmlscriptelement.h>
// #include <lsmmathmlsemanticselement.h>
// #include <lsmmathmlspaceelement.h>
// #include <lsmmathmlstringelement.h>
// #include <lsmmathmlstyle.h>
// #include <lsmmathmlstyleelement.h>
// #include <lsmmathmltablecellelement.h>
// #include <lsmmathmltableelement.h>
// #include <lsmmathmltablerowelement.h>
// #include <lsmmathmltraits.h>
// #include <lsmmathmlunderoverelement.h>
// #include <lsmmathmlutils.h>
// #include <lsmmathmlview.h>
// #include <lsmsvgaelement.h>
// #include <lsmsvgattributes.h>
// #include <lsmsvgcircleelement.h>
// #include <lsmsvgclippathelement.h>
// #include <lsmsvgcolors.h>
// #include <lsmsvgdefselement.h>
// #include <lsmsvgdocument.h>
// #include <lsmsvgelement.h>
// #include <lsmsvgellipseelement.h>
// #include <lsmsvgenums.h>
// #include <lsmsvgfilterblend.h>
// #include <lsmsvgfiltercolormatrix.h>
// #include <lsmsvgfiltercomposite.h>
// #include <lsmsvgfilterconvolvematrix.h>
// #include <lsmsvgfilterdisplacementmap.h>
// #include <lsmsvgfilterelement.h>
// #include <lsmsvgfilterflood.h>
// #include <lsmsvgfiltergaussianblur.h>
// #include <lsmsvgfilterimage.h>
// #include <lsmsvgfiltermerge.h>
// #include <lsmsvgfiltermergenode.h>
// #include <lsmsvgfiltermorphology.h>
// #include <lsmsvgfilteroffset.h>
// #include <lsmsvgfilterprimitive.h>
// #include <lsmsvgfilterspecularlighting.h>
// #include <lsmsvgfiltersurface.h>
// #include <lsmsvgfiltertile.h>
// #include <lsmsvgfilterturbulence.h>
// #include <lsmsvggelement.h>
// #include <lsmsvggradientelement.h>
// #include <lsmsvgimageelement.h>
// #include <lsmsvglength.h>
// #include <lsmsvglineargradientelement.h>
// #include <lsmsvglineelement.h>
// #include <lsmsvgmarkerelement.h>
// #include <lsmsvgmaskelement.h>
// #include <lsmsvgmatrix.h>
// #include <lsmsvgpathelement.h>
// #include <lsmsvgpatternelement.h>
// #include <lsmsvgpolygonelement.h>
// #include <lsmsvgpolylineelement.h>
// #include <lsmsvgradialgradientelement.h>
// #include <lsmsvgrectelement.h>
// #include <lsmsvgstopelement.h>
// #include <lsmsvgstyle.h>
// #include <lsmsvgsvgelement.h>
// #include <lsmsvgswitchelement.h>
// #include <lsmsvgsymbolelement.h>
// #include <lsmsvgtextelement.h>
// #include <lsmsvgtraits.h>
// #include <lsmsvgtransformable.h>
// #include <lsmsvgtspanelement.h>
// #include <lsmsvguseelement.h>
// #include <lsmsvgview.h>
import "C"

// glib.Type values for lsmsvgfiltersurface.go.
var GTypeSVGFilterSurface = externglib.Type(C.lsm_svg_filter_surface_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeSVGFilterSurface, F: marshalSVGFilterSurface},
	})
}

// SVGFilterSurface: instance of this type is always passed by reference.
type SVGFilterSurface struct {
	*svgFilterSurface
}

// svgFilterSurface is the struct that's finalized.
type svgFilterSurface struct {
	native *C.LsmSvgFilterSurface
}

func marshalSVGFilterSurface(p uintptr) (interface{}, error) {
	b := externglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SVGFilterSurface{&svgFilterSurface{(*C.LsmSvgFilterSurface)(b)}}, nil
}

// The function takes the following parameters:
//
func (input *SVGFilterSurface) Alpha(output *SVGFilterSurface) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 *C.LsmSvgFilterSurface // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))

	C.lsm_svg_filter_surface_alpha(_arg0, _arg1)
	runtime.KeepAlive(input)
	runtime.KeepAlive(output)
}

// The function takes the following parameters:
//
//    - input2
//    - output
//    - blendingMode
//
func (input1 *SVGFilterSurface) Blend(input2 *SVGFilterSurface, output *SVGFilterSurface, blendingMode int) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 *C.LsmSvgFilterSurface // out
	var _arg2 *C.LsmSvgFilterSurface // out
	var _arg3 C.int                  // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input1)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input2)))
	_arg2 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))
	_arg3 = C.int(blendingMode)

	C.lsm_svg_filter_surface_blend(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(input1)
	runtime.KeepAlive(input2)
	runtime.KeepAlive(output)
	runtime.KeepAlive(blendingMode)
}

// The function takes the following parameters:
//
//    - output
//    - sx
//    - sy
//
func (input *SVGFilterSurface) Blur(output *SVGFilterSurface, sx float64, sy float64) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 *C.LsmSvgFilterSurface // out
	var _arg2 C.double               // out
	var _arg3 C.double               // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))
	_arg2 = C.double(sx)
	_arg3 = C.double(sy)

	C.lsm_svg_filter_surface_blur(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(input)
	runtime.KeepAlive(output)
	runtime.KeepAlive(sx)
	runtime.KeepAlive(sy)
}

// The function takes the following parameters:
//
//    - output
//    - typ
//    - nValues
//    - values
//
func (input *SVGFilterSurface) ColorMatrix(output *SVGFilterSurface, typ SVGColorFilterType, nValues uint, values *float64) {
	var _arg0 *C.LsmSvgFilterSurface  // out
	var _arg1 *C.LsmSvgFilterSurface  // out
	var _arg2 C.LsmSvgColorFilterType // out
	var _arg3 C.unsigned              // out
	var _arg4 *C.double               // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))
	_arg2 = C.LsmSvgColorFilterType(typ)
	_arg3 = C.unsigned(nValues)
	_arg4 = (*C.double)(unsafe.Pointer(values))

	C.lsm_svg_filter_surface_color_matrix(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(input)
	runtime.KeepAlive(output)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(nValues)
	runtime.KeepAlive(values)
}

// The function takes the following parameters:
//
//    - output
//    - xOrder
//    - yOrder
//    - nValues
//    - values
//    - divisor
//    - bias
//    - targetX
//    - targetY
//    - edgeMode
//    - preserveAlpha
//
func (input *SVGFilterSurface) ConvolveMatrix(output *SVGFilterSurface, xOrder uint, yOrder uint, nValues uint, values *float64, divisor float64, bias float64, targetX uint, targetY uint, edgeMode SVGEdgeMode, preserveAlpha bool) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 *C.LsmSvgFilterSurface // out
	var _arg2 C.unsigned             // out
	var _arg3 C.unsigned             // out
	var _arg4 C.unsigned             // out
	var _arg5 *C.double              // out
	var _arg6 C.double               // out
	var _arg7 C.double               // out
	var _arg8 C.unsigned             // out
	var _arg9 C.unsigned             // out
	var _arg10 C.LsmSvgEdgeMode      // out
	var _arg11 C.gboolean            // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))
	_arg2 = C.unsigned(xOrder)
	_arg3 = C.unsigned(yOrder)
	_arg4 = C.unsigned(nValues)
	_arg5 = (*C.double)(unsafe.Pointer(values))
	_arg6 = C.double(divisor)
	_arg7 = C.double(bias)
	_arg8 = C.unsigned(targetX)
	_arg9 = C.unsigned(targetY)
	_arg10 = C.LsmSvgEdgeMode(edgeMode)
	if preserveAlpha {
		_arg11 = C.TRUE
	}

	C.lsm_svg_filter_surface_convolve_matrix(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11)
	runtime.KeepAlive(input)
	runtime.KeepAlive(output)
	runtime.KeepAlive(xOrder)
	runtime.KeepAlive(yOrder)
	runtime.KeepAlive(nValues)
	runtime.KeepAlive(values)
	runtime.KeepAlive(divisor)
	runtime.KeepAlive(bias)
	runtime.KeepAlive(targetX)
	runtime.KeepAlive(targetY)
	runtime.KeepAlive(edgeMode)
	runtime.KeepAlive(preserveAlpha)
}

// The function takes the following parameters:
//
//    - input2
//    - output
//    - xScale
//    - yScale
//    - xChannelSelector
//    - yChannelSelector
//
func (input1 *SVGFilterSurface) DisplacementMap(input2 *SVGFilterSurface, output *SVGFilterSurface, xScale float64, yScale float64, xChannelSelector SVGChannelSelector, yChannelSelector SVGChannelSelector) {
	var _arg0 *C.LsmSvgFilterSurface  // out
	var _arg1 *C.LsmSvgFilterSurface  // out
	var _arg2 *C.LsmSvgFilterSurface  // out
	var _arg3 C.double                // out
	var _arg4 C.double                // out
	var _arg5 C.LsmSvgChannelSelector // out
	var _arg6 C.LsmSvgChannelSelector // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input1)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input2)))
	_arg2 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))
	_arg3 = C.double(xScale)
	_arg4 = C.double(yScale)
	_arg5 = C.LsmSvgChannelSelector(xChannelSelector)
	_arg6 = C.LsmSvgChannelSelector(yChannelSelector)

	C.lsm_svg_filter_surface_displacement_map(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(input1)
	runtime.KeepAlive(input2)
	runtime.KeepAlive(output)
	runtime.KeepAlive(xScale)
	runtime.KeepAlive(yScale)
	runtime.KeepAlive(xChannelSelector)
	runtime.KeepAlive(yChannelSelector)
}

// The function takes the following parameters:
//
//    - red
//    - green
//    - blue
//    - opacity
//
func (surface *SVGFilterSurface) Flood(red float64, green float64, blue float64, opacity float64) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 C.double               // out
	var _arg2 C.double               // out
	var _arg3 C.double               // out
	var _arg4 C.double               // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(surface)))
	_arg1 = C.double(red)
	_arg2 = C.double(green)
	_arg3 = C.double(blue)
	_arg4 = C.double(opacity)

	C.lsm_svg_filter_surface_flood(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(surface)
	runtime.KeepAlive(red)
	runtime.KeepAlive(green)
	runtime.KeepAlive(blue)
	runtime.KeepAlive(opacity)
}

// The function returns the following values:
//
func (surface *SVGFilterSurface) CairoSurface() *cairo.Surface {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _cret *C.cairo_surface_t     // in

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(surface)))

	_cret = C.lsm_svg_filter_surface_get_cairo_surface(_arg0)
	runtime.KeepAlive(surface)

	var _ret *cairo.Surface // out

	_ret = cairo.WrapSurface(uintptr(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(_ret, func(v *cairo.Surface) {
		C.cairo_surface_destroy((*C.cairo_surface_t)(unsafe.Pointer(v.Native())))
	})

	return _ret
}

// The function returns the following values:
//
func (surface *SVGFilterSurface) Name() string {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _cret *C.char                // in

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(surface)))

	_cret = C.lsm_svg_filter_surface_get_name(_arg0)
	runtime.KeepAlive(surface)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
//    - pixbuf
//    - preserveAspectRatio
//
func (output *SVGFilterSurface) Image(pixbuf *gdkpixbuf.Pixbuf, preserveAspectRatio *SVGPreserveAspectRatio) {
	var _arg0 *C.LsmSvgFilterSurface      // out
	var _arg1 *C.GdkPixbuf                // out
	var _arg2 C.LsmSvgPreserveAspectRatio // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))
	_arg1 = (*C.GdkPixbuf)(unsafe.Pointer(externglib.InternObject(pixbuf).Native()))
	_arg2 = *(*C.LsmSvgPreserveAspectRatio)(gextras.StructNative(unsafe.Pointer(preserveAspectRatio)))

	C.lsm_svg_filter_surface_image(_arg0, _arg1, _arg2)
	runtime.KeepAlive(output)
	runtime.KeepAlive(pixbuf)
	runtime.KeepAlive(preserveAspectRatio)
}

// The function takes the following parameters:
//
func (input *SVGFilterSurface) Merge(output *SVGFilterSurface) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 *C.LsmSvgFilterSurface // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))

	C.lsm_svg_filter_surface_merge(_arg0, _arg1)
	runtime.KeepAlive(input)
	runtime.KeepAlive(output)
}

// The function takes the following parameters:
//
//    - outputSurface
//    - op
//    - rx
//    - ry
//
func (inputSurface *SVGFilterSurface) Morphology(outputSurface *SVGFilterSurface, op SVGMorphologyOperator, rx float64, ry float64) {
	var _arg0 *C.LsmSvgFilterSurface     // out
	var _arg1 *C.LsmSvgFilterSurface     // out
	var _arg2 C.LsmSvgMorphologyOperator // out
	var _arg3 C.double                   // out
	var _arg4 C.double                   // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(inputSurface)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(outputSurface)))
	_arg2 = C.LsmSvgMorphologyOperator(op)
	_arg3 = C.double(rx)
	_arg4 = C.double(ry)

	C.lsm_svg_filter_surface_morphology(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(inputSurface)
	runtime.KeepAlive(outputSurface)
	runtime.KeepAlive(op)
	runtime.KeepAlive(rx)
	runtime.KeepAlive(ry)
}

// The function takes the following parameters:
//
//    - output
//    - dx
//    - dy
//
func (input *SVGFilterSurface) Offset(output *SVGFilterSurface, dx int, dy int) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 *C.LsmSvgFilterSurface // out
	var _arg2 C.int                  // out
	var _arg3 C.int                  // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))
	_arg2 = C.int(dx)
	_arg3 = C.int(dy)

	C.lsm_svg_filter_surface_offset(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(input)
	runtime.KeepAlive(output)
	runtime.KeepAlive(dx)
	runtime.KeepAlive(dy)
}

// The function takes the following parameters:
//
//    - surfaceScale
//    - specularConstant
//    - specularExponent
//    - dx
//    - dy
//
func (outputSurface *SVGFilterSurface) SpecularLighting(surfaceScale float64, specularConstant float64, specularExponent float64, dx float64, dy float64) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 C.double               // out
	var _arg2 C.double               // out
	var _arg3 C.double               // out
	var _arg4 C.double               // out
	var _arg5 C.double               // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(outputSurface)))
	_arg1 = C.double(surfaceScale)
	_arg2 = C.double(specularConstant)
	_arg3 = C.double(specularExponent)
	_arg4 = C.double(dx)
	_arg5 = C.double(dy)

	C.lsm_svg_filter_surface_specular_lighting(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(outputSurface)
	runtime.KeepAlive(surfaceScale)
	runtime.KeepAlive(specularConstant)
	runtime.KeepAlive(specularExponent)
	runtime.KeepAlive(dx)
	runtime.KeepAlive(dy)
}

// The function takes the following parameters:
//
func (input *SVGFilterSurface) Tile(output *SVGFilterSurface) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 *C.LsmSvgFilterSurface // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(input)))
	_arg1 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(output)))

	C.lsm_svg_filter_surface_tile(_arg0, _arg1)
	runtime.KeepAlive(input)
	runtime.KeepAlive(output)
}

// The function takes the following parameters:
//
//    - baseFrequencyX
//    - baseFrequencyY
//    - nOctaves
//    - seed
//    - stitchTiles
//    - typ
//    - transform
//
func (outputSurface *SVGFilterSurface) Turbulence(baseFrequencyX float64, baseFrequencyY float64, nOctaves int, seed float64, stitchTiles SVGStitchTiles, typ SVGTurbulenceType, transform *cairo.Matrix) {
	var _arg0 *C.LsmSvgFilterSurface // out
	var _arg1 C.double               // out
	var _arg2 C.double               // out
	var _arg3 C.int                  // out
	var _arg4 C.double               // out
	var _arg5 C.LsmSvgStitchTiles    // out
	var _arg6 C.LsmSvgTurbulenceType // out
	var _arg7 *C.cairo_matrix_t      // out

	_arg0 = (*C.LsmSvgFilterSurface)(gextras.StructNative(unsafe.Pointer(outputSurface)))
	_arg1 = C.double(baseFrequencyX)
	_arg2 = C.double(baseFrequencyY)
	_arg3 = C.int(nOctaves)
	_arg4 = C.double(seed)
	_arg5 = C.LsmSvgStitchTiles(stitchTiles)
	_arg6 = C.LsmSvgTurbulenceType(typ)
	_arg7 = (*C.cairo_matrix_t)(gextras.StructNative(unsafe.Pointer(transform)))

	C.lsm_svg_filter_surface_turbulence(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(outputSurface)
	runtime.KeepAlive(baseFrequencyX)
	runtime.KeepAlive(baseFrequencyY)
	runtime.KeepAlive(nOctaves)
	runtime.KeepAlive(seed)
	runtime.KeepAlive(stitchTiles)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(transform)
}
